// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.21.1
// source: cargo_def/player_data.proto

package cargo_def

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MAIL_STATUS_TYPE int32

const (
	MAIL_STATUS_TYPE_NONE MAIL_STATUS_TYPE = 0
	MAIL_STATUS_TYPE_READ MAIL_STATUS_TYPE = 1
	MAIL_STATUS_TYPE_DONE MAIL_STATUS_TYPE = 2
)

// Enum value maps for MAIL_STATUS_TYPE.
var (
	MAIL_STATUS_TYPE_name = map[int32]string{
		0: "NONE",
		1: "READ",
		2: "DONE",
	}
	MAIL_STATUS_TYPE_value = map[string]int32{
		"NONE": 0,
		"READ": 1,
		"DONE": 2,
	}
)

func (x MAIL_STATUS_TYPE) Enum() *MAIL_STATUS_TYPE {
	p := new(MAIL_STATUS_TYPE)
	*p = x
	return p
}

func (x MAIL_STATUS_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MAIL_STATUS_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_cargo_def_player_data_proto_enumTypes[0].Descriptor()
}

func (MAIL_STATUS_TYPE) Type() protoreflect.EnumType {
	return &file_cargo_def_player_data_proto_enumTypes[0]
}

func (x MAIL_STATUS_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MAIL_STATUS_TYPE.Descriptor instead.
func (MAIL_STATUS_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{0}
}

type ItemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GUID      uint64          `protobuf:"varint,1,opt,name=GUID,proto3" json:"GUID,omitempty"`
	ClassID   int32           `protobuf:"varint,2,opt,name=classID,proto3" json:"classID,omitempty"`
	Count     int64           `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	OverTime  int32           `protobuf:"varint,4,opt,name=overTime,proto3" json:"overTime,omitempty"`
	AttrsMeta map[int32]int32 `protobuf:"bytes,5,rep,name=attrsMeta,proto3" json:"attrsMeta,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *ItemInfo) Reset() {
	*x = ItemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemInfo) ProtoMessage() {}

func (x *ItemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemInfo.ProtoReflect.Descriptor instead.
func (*ItemInfo) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{0}
}

func (x *ItemInfo) GetGUID() uint64 {
	if x != nil {
		return x.GUID
	}
	return 0
}

func (x *ItemInfo) GetClassID() int32 {
	if x != nil {
		return x.ClassID
	}
	return 0
}

func (x *ItemInfo) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ItemInfo) GetOverTime() int32 {
	if x != nil {
		return x.OverTime
	}
	return 0
}

func (x *ItemInfo) GetAttrsMeta() map[int32]int32 {
	if x != nil {
		return x.AttrsMeta
	}
	return nil
}

type BagDataInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items        map[uint64]*ItemInfo `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ItemsRecords map[int32]int64      `protobuf:"bytes,2,rep,name=itemsRecords,proto3" json:"itemsRecords,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *BagDataInfo) Reset() {
	*x = BagDataInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BagDataInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BagDataInfo) ProtoMessage() {}

func (x *BagDataInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BagDataInfo.ProtoReflect.Descriptor instead.
func (*BagDataInfo) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{1}
}

func (x *BagDataInfo) GetItems() map[uint64]*ItemInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *BagDataInfo) GetItemsRecords() map[int32]int64 {
	if x != nil {
		return x.ItemsRecords
	}
	return nil
}

type WeaponDataInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WeaponBag     map[uint64]*WeaponItemInfo `protobuf:"bytes,3,rep,name=WeaponBag,proto3" json:"WeaponBag,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	WeaponRecords []int32                    `protobuf:"varint,4,rep,packed,name=weaponRecords,proto3" json:"weaponRecords,omitempty"`
}

func (x *WeaponDataInfo) Reset() {
	*x = WeaponDataInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeaponDataInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeaponDataInfo) ProtoMessage() {}

func (x *WeaponDataInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeaponDataInfo.ProtoReflect.Descriptor instead.
func (*WeaponDataInfo) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{2}
}

func (x *WeaponDataInfo) GetWeaponBag() map[uint64]*WeaponItemInfo {
	if x != nil {
		return x.WeaponBag
	}
	return nil
}

func (x *WeaponDataInfo) GetWeaponRecords() []int32 {
	if x != nil {
		return x.WeaponRecords
	}
	return nil
}

type WeaponItemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GUID      uint64          `protobuf:"varint,1,opt,name=GUID,proto3" json:"GUID,omitempty"`
	ClassID   int32           `protobuf:"varint,2,opt,name=classID,proto3" json:"classID,omitempty"`
	RoleGUID  uint64          `protobuf:"varint,3,opt,name=roleGUID,proto3" json:"roleGUID,omitempty"`
	AttrsMeta map[int32]int32 `protobuf:"bytes,4,rep,name=attrsMeta,proto3" json:"attrsMeta,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *WeaponItemInfo) Reset() {
	*x = WeaponItemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeaponItemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeaponItemInfo) ProtoMessage() {}

func (x *WeaponItemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeaponItemInfo.ProtoReflect.Descriptor instead.
func (*WeaponItemInfo) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{3}
}

func (x *WeaponItemInfo) GetGUID() uint64 {
	if x != nil {
		return x.GUID
	}
	return 0
}

func (x *WeaponItemInfo) GetClassID() int32 {
	if x != nil {
		return x.ClassID
	}
	return 0
}

func (x *WeaponItemInfo) GetRoleGUID() uint64 {
	if x != nil {
		return x.RoleGUID
	}
	return 0
}

func (x *WeaponItemInfo) GetAttrsMeta() map[int32]int32 {
	if x != nil {
		return x.AttrsMeta
	}
	return nil
}

type ChipItemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GUID      uint64  `protobuf:"varint,1,opt,name=GUID,proto3" json:"GUID,omitempty"`
	ClassID   int32   `protobuf:"varint,2,opt,name=classID,proto3" json:"classID,omitempty"`
	Level     int32   `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	Exp       int32   `protobuf:"varint,4,opt,name=exp,proto3" json:"exp,omitempty"`
	IsLocked  bool    `protobuf:"varint,5,opt,name=isLocked,proto3" json:"isLocked,omitempty"`
	RoleGUID  uint64  `protobuf:"varint,6,opt,name=roleGUID,proto3" json:"roleGUID,omitempty"`
	Skills    []int32 `protobuf:"varint,7,rep,packed,name=skills,proto3" json:"skills,omitempty"`
	Attribute int32   `protobuf:"varint,8,opt,name=attribute,proto3" json:"attribute,omitempty"`
}

func (x *ChipItemInfo) Reset() {
	*x = ChipItemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChipItemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChipItemInfo) ProtoMessage() {}

func (x *ChipItemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChipItemInfo.ProtoReflect.Descriptor instead.
func (*ChipItemInfo) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{4}
}

func (x *ChipItemInfo) GetGUID() uint64 {
	if x != nil {
		return x.GUID
	}
	return 0
}

func (x *ChipItemInfo) GetClassID() int32 {
	if x != nil {
		return x.ClassID
	}
	return 0
}

func (x *ChipItemInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ChipItemInfo) GetExp() int32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *ChipItemInfo) GetIsLocked() bool {
	if x != nil {
		return x.IsLocked
	}
	return false
}

func (x *ChipItemInfo) GetRoleGUID() uint64 {
	if x != nil {
		return x.RoleGUID
	}
	return 0
}

func (x *ChipItemInfo) GetSkills() []int32 {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *ChipItemInfo) GetAttribute() int32 {
	if x != nil {
		return x.Attribute
	}
	return 0
}

type ChipFightInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassID   int32   `protobuf:"varint,1,opt,name=classID,proto3" json:"classID,omitempty"`
	Skills    []int32 `protobuf:"varint,2,rep,packed,name=skills,proto3" json:"skills,omitempty"`
	Attribute int32   `protobuf:"varint,3,opt,name=attribute,proto3" json:"attribute,omitempty"`
}

func (x *ChipFightInfo) Reset() {
	*x = ChipFightInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChipFightInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChipFightInfo) ProtoMessage() {}

func (x *ChipFightInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChipFightInfo.ProtoReflect.Descriptor instead.
func (*ChipFightInfo) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{5}
}

func (x *ChipFightInfo) GetClassID() int32 {
	if x != nil {
		return x.ClassID
	}
	return 0
}

func (x *ChipFightInfo) GetSkills() []int32 {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *ChipFightInfo) GetAttribute() int32 {
	if x != nil {
		return x.Attribute
	}
	return 0
}

type ChipDataInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChipBag map[uint64]*ChipItemInfo `protobuf:"bytes,1,rep,name=chipBag,proto3" json:"chipBag,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ChipDataInfo) Reset() {
	*x = ChipDataInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChipDataInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChipDataInfo) ProtoMessage() {}

func (x *ChipDataInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChipDataInfo.ProtoReflect.Descriptor instead.
func (*ChipDataInfo) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{6}
}

func (x *ChipDataInfo) GetChipBag() map[uint64]*ChipItemInfo {
	if x != nil {
		return x.ChipBag
	}
	return nil
}

type RoleItemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GUID             uint64           `protobuf:"varint,1,opt,name=GUID,proto3" json:"GUID,omitempty"`
	ClassID          int32            `protobuf:"varint,2,opt,name=classID,proto3" json:"classID,omitempty"`
	Level            int32            `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	Exp              int32            `protobuf:"varint,4,opt,name=exp,proto3" json:"exp,omitempty"`
	Break            int32            `protobuf:"varint,5,opt,name=break,proto3" json:"break,omitempty"`
	Awaken           int32            `protobuf:"varint,6,opt,name=awaken,proto3" json:"awaken,omitempty"`
	Chips            map[int32]uint64 `protobuf:"bytes,14,rep,name=chips,proto3" json:"chips,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`     // <pos,GUID> 正在使用的芯片
	Weapons          map[int32]uint64 `protobuf:"bytes,15,rep,name=weapons,proto3" json:"weapons,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //<pos,item>  武器属性
	Elf              int32            `protobuf:"varint,16,opt,name=elf,proto3" json:"elf,omitempty"`                                                                                                  // 正在使用的 elf
	Skills           map[int32]int32  `protobuf:"bytes,25,rep,name=skills,proto3" json:"skills,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`   // <技能ID,技能等级>
	ActivatedTalents []int32          `protobuf:"varint,26,rep,packed,name=activatedTalents,proto3" json:"activatedTalents,omitempty"`                                                                 // 已觉醒的天赋 ID
}

func (x *RoleItemInfo) Reset() {
	*x = RoleItemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleItemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleItemInfo) ProtoMessage() {}

func (x *RoleItemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleItemInfo.ProtoReflect.Descriptor instead.
func (*RoleItemInfo) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{7}
}

func (x *RoleItemInfo) GetGUID() uint64 {
	if x != nil {
		return x.GUID
	}
	return 0
}

func (x *RoleItemInfo) GetClassID() int32 {
	if x != nil {
		return x.ClassID
	}
	return 0
}

func (x *RoleItemInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *RoleItemInfo) GetExp() int32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *RoleItemInfo) GetBreak() int32 {
	if x != nil {
		return x.Break
	}
	return 0
}

func (x *RoleItemInfo) GetAwaken() int32 {
	if x != nil {
		return x.Awaken
	}
	return 0
}

func (x *RoleItemInfo) GetChips() map[int32]uint64 {
	if x != nil {
		return x.Chips
	}
	return nil
}

func (x *RoleItemInfo) GetWeapons() map[int32]uint64 {
	if x != nil {
		return x.Weapons
	}
	return nil
}

func (x *RoleItemInfo) GetElf() int32 {
	if x != nil {
		return x.Elf
	}
	return 0
}

func (x *RoleItemInfo) GetSkills() map[int32]int32 {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *RoleItemInfo) GetActivatedTalents() []int32 {
	if x != nil {
		return x.ActivatedTalents
	}
	return nil
}

type RoleFightItemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GUID             uint64                   `protobuf:"varint,1,opt,name=GUID,proto3" json:"GUID,omitempty"`
	ClassID          int32                    `protobuf:"varint,2,opt,name=classID,proto3" json:"classID,omitempty"`
	Level            int32                    `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	Break            int32                    `protobuf:"varint,5,opt,name=break,proto3" json:"break,omitempty"`
	Awaken           int32                    `protobuf:"varint,6,opt,name=awaken,proto3" json:"awaken,omitempty"`
	AttrsMeta        map[int32]int32          `protobuf:"bytes,13,rep,name=attrsMeta,proto3" json:"attrsMeta,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //<属性类型，属性值> 基础成长属性
	Chips            map[int32]*ChipFightInfo `protobuf:"bytes,14,rep,name=chips,proto3" json:"chips,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`          // <pos,chip>
	Weapons          map[int32]int32          `protobuf:"bytes,15,rep,name=weapons,proto3" json:"weapons,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`     //<pos,classid>
	Elf              *ElfFightInfo            `protobuf:"bytes,16,opt,name=elf,proto3" json:"elf,omitempty"`                                                                                                       // 正在使用的 elf
	Skills           map[int32]int32          `protobuf:"bytes,25,rep,name=skills,proto3" json:"skills,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`       // <技能ID,技能等级>
	ActivatedTalents []int32                  `protobuf:"varint,26,rep,packed,name=activatedTalents,proto3" json:"activatedTalents,omitempty"`                                                                     // 已觉醒的天赋 ID
}

func (x *RoleFightItemInfo) Reset() {
	*x = RoleFightItemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleFightItemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleFightItemInfo) ProtoMessage() {}

func (x *RoleFightItemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleFightItemInfo.ProtoReflect.Descriptor instead.
func (*RoleFightItemInfo) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{8}
}

func (x *RoleFightItemInfo) GetGUID() uint64 {
	if x != nil {
		return x.GUID
	}
	return 0
}

func (x *RoleFightItemInfo) GetClassID() int32 {
	if x != nil {
		return x.ClassID
	}
	return 0
}

func (x *RoleFightItemInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *RoleFightItemInfo) GetBreak() int32 {
	if x != nil {
		return x.Break
	}
	return 0
}

func (x *RoleFightItemInfo) GetAwaken() int32 {
	if x != nil {
		return x.Awaken
	}
	return 0
}

func (x *RoleFightItemInfo) GetAttrsMeta() map[int32]int32 {
	if x != nil {
		return x.AttrsMeta
	}
	return nil
}

func (x *RoleFightItemInfo) GetChips() map[int32]*ChipFightInfo {
	if x != nil {
		return x.Chips
	}
	return nil
}

func (x *RoleFightItemInfo) GetWeapons() map[int32]int32 {
	if x != nil {
		return x.Weapons
	}
	return nil
}

func (x *RoleFightItemInfo) GetElf() *ElfFightInfo {
	if x != nil {
		return x.Elf
	}
	return nil
}

func (x *RoleFightItemInfo) GetSkills() map[int32]int32 {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *RoleFightItemInfo) GetActivatedTalents() []int32 {
	if x != nil {
		return x.ActivatedTalents
	}
	return nil
}

type TaskMarkSave struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarkID int64 `protobuf:"varint,1,opt,name=markID,proto3" json:"markID,omitempty"`
	Val    int64 `protobuf:"varint,4,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *TaskMarkSave) Reset() {
	*x = TaskMarkSave{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskMarkSave) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskMarkSave) ProtoMessage() {}

func (x *TaskMarkSave) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskMarkSave.ProtoReflect.Descriptor instead.
func (*TaskMarkSave) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{9}
}

func (x *TaskMarkSave) GetMarkID() int64 {
	if x != nil {
		return x.MarkID
	}
	return 0
}

func (x *TaskMarkSave) GetVal() int64 {
	if x != nil {
		return x.Val
	}
	return 0
}

type TaskData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID       int32           `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	TaskStateID  int32           `protobuf:"varint,2,opt,name=taskStateID,proto3" json:"taskStateID,omitempty"`
	TaskPolicyID int32           `protobuf:"varint,3,opt,name=taskPolicyID,proto3" json:"taskPolicyID,omitempty"`
	MarkList     []*TaskMarkSave `protobuf:"bytes,4,rep,name=markList,proto3" json:"markList,omitempty"`
}

func (x *TaskData) Reset() {
	*x = TaskData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskData) ProtoMessage() {}

func (x *TaskData) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskData.ProtoReflect.Descriptor instead.
func (*TaskData) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{10}
}

func (x *TaskData) GetTaskID() int32 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *TaskData) GetTaskStateID() int32 {
	if x != nil {
		return x.TaskStateID
	}
	return 0
}

func (x *TaskData) GetTaskPolicyID() int32 {
	if x != nil {
		return x.TaskPolicyID
	}
	return 0
}

func (x *TaskData) GetMarkList() []*TaskMarkSave {
	if x != nil {
		return x.MarkList
	}
	return nil
}

type RecordDataInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RecordDataInfo) Reset() {
	*x = RecordDataInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordDataInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordDataInfo) ProtoMessage() {}

func (x *RecordDataInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordDataInfo.ProtoReflect.Descriptor instead.
func (*RecordDataInfo) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{11}
}

type TaskStepData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyID int32 `protobuf:"varint,2,opt,name=policyID,proto3" json:"policyID,omitempty"`
	SelectID int32 `protobuf:"varint,3,opt,name=selectID,proto3" json:"selectID,omitempty"`
}

func (x *TaskStepData) Reset() {
	*x = TaskStepData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStepData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStepData) ProtoMessage() {}

func (x *TaskStepData) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStepData.ProtoReflect.Descriptor instead.
func (*TaskStepData) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{12}
}

func (x *TaskStepData) GetPolicyID() int32 {
	if x != nil {
		return x.PolicyID
	}
	return 0
}

func (x *TaskStepData) GetSelectID() int32 {
	if x != nil {
		return x.SelectID
	}
	return 0
}

type TaskStateHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateID   int32           `protobuf:"varint,1,opt,name=stateID,proto3" json:"stateID,omitempty"`
	TaskSteps []*TaskStepData `protobuf:"bytes,3,rep,name=taskSteps,proto3" json:"taskSteps,omitempty"`
}

func (x *TaskStateHistory) Reset() {
	*x = TaskStateHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStateHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStateHistory) ProtoMessage() {}

func (x *TaskStateHistory) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStateHistory.ProtoReflect.Descriptor instead.
func (*TaskStateHistory) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{13}
}

func (x *TaskStateHistory) GetStateID() int32 {
	if x != nil {
		return x.StateID
	}
	return 0
}

func (x *TaskStateHistory) GetTaskSteps() []*TaskStepData {
	if x != nil {
		return x.TaskSteps
	}
	return nil
}

type TaskDeliverData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskCompleted int32               `protobuf:"varint,1,opt,name=taskCompleted,proto3" json:"taskCompleted,omitempty"`
	StateHistory  []*TaskStateHistory `protobuf:"bytes,3,rep,name=stateHistory,proto3" json:"stateHistory,omitempty"`
}

func (x *TaskDeliverData) Reset() {
	*x = TaskDeliverData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskDeliverData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskDeliverData) ProtoMessage() {}

func (x *TaskDeliverData) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskDeliverData.ProtoReflect.Descriptor instead.
func (*TaskDeliverData) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{14}
}

func (x *TaskDeliverData) GetTaskCompleted() int32 {
	if x != nil {
		return x.TaskCompleted
	}
	return 0
}

func (x *TaskDeliverData) GetStateHistory() []*TaskStateHistory {
	if x != nil {
		return x.StateHistory
	}
	return nil
}

type TaskDataInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskMap       map[int32]*TaskData        `protobuf:"bytes,1,rep,name=taskMap,proto3" json:"taskMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DeliveredTask map[int32]*TaskDeliverData `protobuf:"bytes,2,rep,name=deliveredTask,proto3" json:"deliveredTask,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CycleTask     map[int32]*TaskCycle       `protobuf:"bytes,3,rep,name=cycleTask,proto3" json:"cycleTask,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //taskId,time
	TraceTask     int32                      `protobuf:"varint,4,opt,name=traceTask,proto3" json:"traceTask,omitempty"`
}

func (x *TaskDataInfo) Reset() {
	*x = TaskDataInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskDataInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskDataInfo) ProtoMessage() {}

func (x *TaskDataInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskDataInfo.ProtoReflect.Descriptor instead.
func (*TaskDataInfo) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{15}
}

func (x *TaskDataInfo) GetTaskMap() map[int32]*TaskData {
	if x != nil {
		return x.TaskMap
	}
	return nil
}

func (x *TaskDataInfo) GetDeliveredTask() map[int32]*TaskDeliverData {
	if x != nil {
		return x.DeliveredTask
	}
	return nil
}

func (x *TaskDataInfo) GetCycleTask() map[int32]*TaskCycle {
	if x != nil {
		return x.CycleTask
	}
	return nil
}

func (x *TaskDataInfo) GetTraceTask() int32 {
	if x != nil {
		return x.TraceTask
	}
	return 0
}

type TaskCycle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlushType   int32 `protobuf:"varint,1,opt,name=flushType,proto3" json:"flushType,omitempty"` //刷新进度
	DailyCount  int32 `protobuf:"varint,2,opt,name=dailyCount,proto3" json:"dailyCount,omitempty"`
	WeeklyCount int32 `protobuf:"varint,3,opt,name=WeeklyCount,proto3" json:"WeeklyCount,omitempty"`
}

func (x *TaskCycle) Reset() {
	*x = TaskCycle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskCycle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCycle) ProtoMessage() {}

func (x *TaskCycle) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCycle.ProtoReflect.Descriptor instead.
func (*TaskCycle) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{16}
}

func (x *TaskCycle) GetFlushType() int32 {
	if x != nil {
		return x.FlushType
	}
	return 0
}

func (x *TaskCycle) GetDailyCount() int32 {
	if x != nil {
		return x.DailyCount
	}
	return 0
}

func (x *TaskCycle) GetWeeklyCount() int32 {
	if x != nil {
		return x.WeeklyCount
	}
	return 0
}

type MailAttachMent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarkType int32 `protobuf:"varint,1,opt,name=markType,proto3" json:"markType,omitempty"`
}

func (x *MailAttachMent) Reset() {
	*x = MailAttachMent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MailAttachMent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MailAttachMent) ProtoMessage() {}

func (x *MailAttachMent) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MailAttachMent.ProtoReflect.Descriptor instead.
func (*MailAttachMent) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{17}
}

func (x *MailAttachMent) GetMarkType() int32 {
	if x != nil {
		return x.MarkType
	}
	return 0
}

type MailDataInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MailID          int64             `protobuf:"varint,1,opt,name=mailID,proto3" json:"mailID,omitempty"`
	Status          int32             `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Title           string            `protobuf:"bytes,12,opt,name=title,proto3" json:"title,omitempty"`
	AuthorID        int32             `protobuf:"varint,13,opt,name=authorID,proto3" json:"authorID,omitempty"`
	AuthorName      string            `protobuf:"bytes,14,opt,name=authorName,proto3" json:"authorName,omitempty"`
	ContentText     string            `protobuf:"bytes,15,opt,name=contentText,proto3" json:"contentText,omitempty"`
	MailAttachMents []*MailAttachMent `protobuf:"bytes,16,rep,name=mailAttachMents,proto3" json:"mailAttachMents,omitempty"`
	Time            int64             `protobuf:"varint,17,opt,name=time,proto3" json:"time,omitempty"`
	KeepDuration    int32             `protobuf:"varint,18,opt,name=keepDuration,proto3" json:"keepDuration,omitempty"`
}

func (x *MailDataInfo) Reset() {
	*x = MailDataInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MailDataInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MailDataInfo) ProtoMessage() {}

func (x *MailDataInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MailDataInfo.ProtoReflect.Descriptor instead.
func (*MailDataInfo) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{18}
}

func (x *MailDataInfo) GetMailID() int64 {
	if x != nil {
		return x.MailID
	}
	return 0
}

func (x *MailDataInfo) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *MailDataInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MailDataInfo) GetAuthorID() int32 {
	if x != nil {
		return x.AuthorID
	}
	return 0
}

func (x *MailDataInfo) GetAuthorName() string {
	if x != nil {
		return x.AuthorName
	}
	return ""
}

func (x *MailDataInfo) GetContentText() string {
	if x != nil {
		return x.ContentText
	}
	return ""
}

func (x *MailDataInfo) GetMailAttachMents() []*MailAttachMent {
	if x != nil {
		return x.MailAttachMents
	}
	return nil
}

func (x *MailDataInfo) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *MailDataInfo) GetKeepDuration() int32 {
	if x != nil {
		return x.KeepDuration
	}
	return 0
}

type ReportMailData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid   uint64 `protobuf:"varint,1,opt,name=guid,proto3" json:"guid,omitempty"`
	MailID int32  `protobuf:"varint,2,opt,name=mailID,proto3" json:"mailID,omitempty"`
	Time   int32  `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	Status int32  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ReportMailData) Reset() {
	*x = ReportMailData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportMailData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportMailData) ProtoMessage() {}

func (x *ReportMailData) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportMailData.ProtoReflect.Descriptor instead.
func (*ReportMailData) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{19}
}

func (x *ReportMailData) GetGuid() uint64 {
	if x != nil {
		return x.Guid
	}
	return 0
}

func (x *ReportMailData) GetMailID() int32 {
	if x != nil {
		return x.MailID
	}
	return 0
}

func (x *ReportMailData) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *ReportMailData) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type PMDataInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MailIDidx  uint64                     `protobuf:"varint,1,opt,name=mailIDidx,proto3" json:"mailIDidx,omitempty"`
	MailRecord map[uint64]*ReportMailData `protobuf:"bytes,2,rep,name=mailRecord,proto3" json:"mailRecord,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PMDataInfo) Reset() {
	*x = PMDataInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PMDataInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PMDataInfo) ProtoMessage() {}

func (x *PMDataInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PMDataInfo.ProtoReflect.Descriptor instead.
func (*PMDataInfo) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{20}
}

func (x *PMDataInfo) GetMailIDidx() uint64 {
	if x != nil {
		return x.MailIDidx
	}
	return 0
}

func (x *PMDataInfo) GetMailRecord() map[uint64]*ReportMailData {
	if x != nil {
		return x.MailRecord
	}
	return nil
}

type BBSCommentData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentID int32 `protobuf:"varint,1,opt,name=commentID,proto3" json:"commentID,omitempty"`
	SelectID  int32 `protobuf:"varint,2,opt,name=selectID,proto3" json:"selectID,omitempty"`
	Time      int32 `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *BBSCommentData) Reset() {
	*x = BBSCommentData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BBSCommentData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BBSCommentData) ProtoMessage() {}

func (x *BBSCommentData) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BBSCommentData.ProtoReflect.Descriptor instead.
func (*BBSCommentData) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{21}
}

func (x *BBSCommentData) GetCommentID() int32 {
	if x != nil {
		return x.CommentID
	}
	return 0
}

func (x *BBSCommentData) GetSelectID() int32 {
	if x != nil {
		return x.SelectID
	}
	return 0
}

func (x *BBSCommentData) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

type BBSArticleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArticleID int32             `protobuf:"varint,1,opt,name=articleID,proto3" json:"articleID,omitempty"`
	Star      int32             `protobuf:"varint,2,opt,name=star,proto3" json:"star,omitempty"`
	Time      int32             `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	Comments  []*BBSCommentData `protobuf:"bytes,4,rep,name=comments,proto3" json:"comments,omitempty"`
	IsRead    bool              `protobuf:"varint,5,opt,name=isRead,proto3" json:"isRead,omitempty"`
	IsMark    bool              `protobuf:"varint,6,opt,name=isMark,proto3" json:"isMark,omitempty"`
	IsStar    bool              `protobuf:"varint,7,opt,name=isStar,proto3" json:"isStar,omitempty"`
}

func (x *BBSArticleData) Reset() {
	*x = BBSArticleData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BBSArticleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BBSArticleData) ProtoMessage() {}

func (x *BBSArticleData) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BBSArticleData.ProtoReflect.Descriptor instead.
func (*BBSArticleData) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{22}
}

func (x *BBSArticleData) GetArticleID() int32 {
	if x != nil {
		return x.ArticleID
	}
	return 0
}

func (x *BBSArticleData) GetStar() int32 {
	if x != nil {
		return x.Star
	}
	return 0
}

func (x *BBSArticleData) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *BBSArticleData) GetComments() []*BBSCommentData {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *BBSArticleData) GetIsRead() bool {
	if x != nil {
		return x.IsRead
	}
	return false
}

func (x *BBSArticleData) GetIsMark() bool {
	if x != nil {
		return x.IsMark
	}
	return false
}

func (x *BBSArticleData) GetIsStar() bool {
	if x != nil {
		return x.IsStar
	}
	return false
}

type BBSDataInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArticleData map[int32]*BBSArticleData `protobuf:"bytes,1,rep,name=articleData,proto3" json:"articleData,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BBSDataInfo) Reset() {
	*x = BBSDataInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BBSDataInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BBSDataInfo) ProtoMessage() {}

func (x *BBSDataInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BBSDataInfo.ProtoReflect.Descriptor instead.
func (*BBSDataInfo) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{23}
}

func (x *BBSDataInfo) GetArticleData() map[int32]*BBSArticleData {
	if x != nil {
		return x.ArticleData
	}
	return nil
}

type GamePhoneOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID  int32 `protobuf:"varint,1,opt,name=groupID,proto3" json:"groupID,omitempty"`
	SelectID int32 `protobuf:"varint,2,opt,name=selectID,proto3" json:"selectID,omitempty"`
}

func (x *GamePhoneOrder) Reset() {
	*x = GamePhoneOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamePhoneOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePhoneOrder) ProtoMessage() {}

func (x *GamePhoneOrder) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePhoneOrder.ProtoReflect.Descriptor instead.
func (*GamePhoneOrder) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{24}
}

func (x *GamePhoneOrder) GetGroupID() int32 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

func (x *GamePhoneOrder) GetSelectID() int32 {
	if x != nil {
		return x.SelectID
	}
	return 0
}

type GamePhoneDataInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GamePhoneDataMap map[int32]*GamePhoneData `protobuf:"bytes,1,rep,name=gamePhoneDataMap,proto3" json:"gamePhoneDataMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GamePhoneDataInfo) Reset() {
	*x = GamePhoneDataInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamePhoneDataInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePhoneDataInfo) ProtoMessage() {}

func (x *GamePhoneDataInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePhoneDataInfo.ProtoReflect.Descriptor instead.
func (*GamePhoneDataInfo) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{25}
}

func (x *GamePhoneDataInfo) GetGamePhoneDataMap() map[int32]*GamePhoneData {
	if x != nil {
		return x.GamePhoneDataMap
	}
	return nil
}

type GamePhoneData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GamePhoneID          int32                        `protobuf:"varint,1,opt,name=GamePhoneID,proto3" json:"GamePhoneID,omitempty"`
	GamePhoneState       int32                        `protobuf:"varint,2,opt,name=GamePhoneState,proto3" json:"GamePhoneState,omitempty"`
	GamePhoneFlowDataMap map[int32]*GamePhoneFlowData `protobuf:"bytes,3,rep,name=gamePhoneFlowDataMap,proto3" json:"gamePhoneFlowDataMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GamePhoneData) Reset() {
	*x = GamePhoneData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamePhoneData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePhoneData) ProtoMessage() {}

func (x *GamePhoneData) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePhoneData.ProtoReflect.Descriptor instead.
func (*GamePhoneData) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{26}
}

func (x *GamePhoneData) GetGamePhoneID() int32 {
	if x != nil {
		return x.GamePhoneID
	}
	return 0
}

func (x *GamePhoneData) GetGamePhoneState() int32 {
	if x != nil {
		return x.GamePhoneState
	}
	return 0
}

func (x *GamePhoneData) GetGamePhoneFlowDataMap() map[int32]*GamePhoneFlowData {
	if x != nil {
		return x.GamePhoneFlowDataMap
	}
	return nil
}

type GamePhoneFlowData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GamePhoneFlowState int32   `protobuf:"varint,1,opt,name=gamePhoneFlowState,proto3" json:"gamePhoneFlowState,omitempty"`
	FromTextLine       []int32 `protobuf:"varint,2,rep,packed,name=fromTextLine,proto3" json:"fromTextLine,omitempty"`
	ToTextLine         []int32 `protobuf:"varint,3,rep,packed,name=toTextLine,proto3" json:"toTextLine,omitempty"`
}

func (x *GamePhoneFlowData) Reset() {
	*x = GamePhoneFlowData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamePhoneFlowData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePhoneFlowData) ProtoMessage() {}

func (x *GamePhoneFlowData) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePhoneFlowData.ProtoReflect.Descriptor instead.
func (*GamePhoneFlowData) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{27}
}

func (x *GamePhoneFlowData) GetGamePhoneFlowState() int32 {
	if x != nil {
		return x.GamePhoneFlowState
	}
	return 0
}

func (x *GamePhoneFlowData) GetFromTextLine() []int32 {
	if x != nil {
		return x.FromTextLine
	}
	return nil
}

func (x *GamePhoneFlowData) GetToTextLine() []int32 {
	if x != nil {
		return x.ToTextLine
	}
	return nil
}

type KVDataInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlagData map[int32]*FlagData `protobuf:"bytes,1,rep,name=flagData,proto3" json:"flagData,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // type : ID : value
	EventsKv map[int32]int32     `protobuf:"bytes,2,rep,name=eventsKv,proto3" json:"eventsKv,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Counter  map[int32]int32     `protobuf:"bytes,3,rep,name=counter,proto3" json:"counter,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *KVDataInfo) Reset() {
	*x = KVDataInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KVDataInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KVDataInfo) ProtoMessage() {}

func (x *KVDataInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KVDataInfo.ProtoReflect.Descriptor instead.
func (*KVDataInfo) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{28}
}

func (x *KVDataInfo) GetFlagData() map[int32]*FlagData {
	if x != nil {
		return x.FlagData
	}
	return nil
}

func (x *KVDataInfo) GetEventsKv() map[int32]int32 {
	if x != nil {
		return x.EventsKv
	}
	return nil
}

func (x *KVDataInfo) GetCounter() map[int32]int32 {
	if x != nil {
		return x.Counter
	}
	return nil
}

type FlagData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlagMap map[int32]int32 `protobuf:"bytes,1,rep,name=flagMap,proto3" json:"flagMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *FlagData) Reset() {
	*x = FlagData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlagData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagData) ProtoMessage() {}

func (x *FlagData) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagData.ProtoReflect.Descriptor instead.
func (*FlagData) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{29}
}

func (x *FlagData) GetFlagMap() map[int32]int32 {
	if x != nil {
		return x.FlagMap
	}
	return nil
}

type FightTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupName string   `protobuf:"bytes,2,opt,name=groupName,proto3" json:"groupName,omitempty"`
	RolesGuid []uint64 `protobuf:"varint,5,rep,packed,name=rolesGuid,proto3" json:"rolesGuid,omitempty"`
}

func (x *FightTeam) Reset() {
	*x = FightTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightTeam) ProtoMessage() {}

func (x *FightTeam) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightTeam.ProtoReflect.Descriptor instead.
func (*FightTeam) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{30}
}

func (x *FightTeam) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *FightTeam) GetRolesGuid() []uint64 {
	if x != nil {
		return x.RolesGuid
	}
	return nil
}

type RoleDataInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleDatas map[uint64]*RoleItemInfo `protobuf:"bytes,2,rep,name=roleDatas,proto3" json:"roleDatas,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RoleDataInfo) Reset() {
	*x = RoleDataInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleDataInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleDataInfo) ProtoMessage() {}

func (x *RoleDataInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleDataInfo.ProtoReflect.Descriptor instead.
func (*RoleDataInfo) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{31}
}

func (x *RoleDataInfo) GetRoleDatas() map[uint64]*RoleItemInfo {
	if x != nil {
		return x.RoleDatas
	}
	return nil
}

type FightTeamGroupDataInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultID uint32                `protobuf:"varint,1,opt,name=defaultID,proto3" json:"defaultID,omitempty"`
	TeamData  map[uint32]*FightTeam `protobuf:"bytes,2,rep,name=teamData,proto3" json:"teamData,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FightTeamGroupDataInfo) Reset() {
	*x = FightTeamGroupDataInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightTeamGroupDataInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightTeamGroupDataInfo) ProtoMessage() {}

func (x *FightTeamGroupDataInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightTeamGroupDataInfo.ProtoReflect.Descriptor instead.
func (*FightTeamGroupDataInfo) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{32}
}

func (x *FightTeamGroupDataInfo) GetDefaultID() uint32 {
	if x != nil {
		return x.DefaultID
	}
	return 0
}

func (x *FightTeamGroupDataInfo) GetTeamData() map[uint32]*FightTeam {
	if x != nil {
		return x.TeamData
	}
	return nil
}

type DungeonBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result          int32            `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	LastTime        int32            `protobuf:"varint,2,opt,name=lastTime,proto3" json:"lastTime,omitempty"`
	LimitCount      map[int32]int32  `protobuf:"bytes,3,rep,name=LimitCount,proto3" json:"LimitCount,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FinishCondition []bool           `protobuf:"varint,4,rep,packed,name=finishCondition,proto3" json:"finishCondition,omitempty"`
	Roles           map[uint64]int32 `protobuf:"bytes,5,rep,name=roles,proto3" json:"roles,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *DungeonBaseInfo) Reset() {
	*x = DungeonBaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonBaseInfo) ProtoMessage() {}

func (x *DungeonBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonBaseInfo.ProtoReflect.Descriptor instead.
func (*DungeonBaseInfo) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{33}
}

func (x *DungeonBaseInfo) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *DungeonBaseInfo) GetLastTime() int32 {
	if x != nil {
		return x.LastTime
	}
	return 0
}

func (x *DungeonBaseInfo) GetLimitCount() map[int32]int32 {
	if x != nil {
		return x.LimitCount
	}
	return nil
}

func (x *DungeonBaseInfo) GetFinishCondition() []bool {
	if x != nil {
		return x.FinishCondition
	}
	return nil
}

func (x *DungeonBaseInfo) GetRoles() map[uint64]int32 {
	if x != nil {
		return x.Roles
	}
	return nil
}

type DungeonRecordInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DungeonBase map[int32]*DungeonBaseInfo `protobuf:"bytes,1,rep,name=dungeonBase,proto3" json:"dungeonBase,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 关卡Id + 数据
}

func (x *DungeonRecordInfo) Reset() {
	*x = DungeonRecordInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonRecordInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonRecordInfo) ProtoMessage() {}

func (x *DungeonRecordInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonRecordInfo.ProtoReflect.Descriptor instead.
func (*DungeonRecordInfo) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{34}
}

func (x *DungeonRecordInfo) GetDungeonBase() map[int32]*DungeonBaseInfo {
	if x != nil {
		return x.DungeonBase
	}
	return nil
}

type RewardData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardMeta              map[int32]*RewardItemInfo           `protobuf:"bytes,1,rep,name=rewardMeta,proto3" json:"rewardMeta,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RewardGroupMissCountMap map[int32]*RewardGroupMissCountData `protobuf:"bytes,2,rep,name=rewardGroupMissCountMap,proto3" json:"rewardGroupMissCountMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RewardType3Data         map[int32]*RewardType3Data          `protobuf:"bytes,3,rep,name=rewardType3Data,proto3" json:"rewardType3Data,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RewardData) Reset() {
	*x = RewardData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardData) ProtoMessage() {}

func (x *RewardData) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardData.ProtoReflect.Descriptor instead.
func (*RewardData) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{35}
}

func (x *RewardData) GetRewardMeta() map[int32]*RewardItemInfo {
	if x != nil {
		return x.RewardMeta
	}
	return nil
}

func (x *RewardData) GetRewardGroupMissCountMap() map[int32]*RewardGroupMissCountData {
	if x != nil {
		return x.RewardGroupMissCountMap
	}
	return nil
}

func (x *RewardData) GetRewardType3Data() map[int32]*RewardType3Data {
	if x != nil {
		return x.RewardType3Data
	}
	return nil
}

type RewardGroupMissCountData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MissCount           uint32 `protobuf:"varint,1,opt,name=MissCount,proto3" json:"MissCount,omitempty"`
	RequireTagMissCount uint32 `protobuf:"varint,2,opt,name=RequireTagMissCount,proto3" json:"RequireTagMissCount,omitempty"`
}

func (x *RewardGroupMissCountData) Reset() {
	*x = RewardGroupMissCountData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardGroupMissCountData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardGroupMissCountData) ProtoMessage() {}

func (x *RewardGroupMissCountData) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardGroupMissCountData.ProtoReflect.Descriptor instead.
func (*RewardGroupMissCountData) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{36}
}

func (x *RewardGroupMissCountData) GetMissCount() uint32 {
	if x != nil {
		return x.MissCount
	}
	return 0
}

func (x *RewardGroupMissCountData) GetRequireTagMissCount() uint32 {
	if x != nil {
		return x.RequireTagMissCount
	}
	return 0
}

type RewardType3Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupIDSlice []int32 `protobuf:"varint,1,rep,packed,name=GroupIDSlice,proto3" json:"GroupIDSlice,omitempty"`
}

func (x *RewardType3Data) Reset() {
	*x = RewardType3Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardType3Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardType3Data) ProtoMessage() {}

func (x *RewardType3Data) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardType3Data.ProtoReflect.Descriptor instead.
func (*RewardType3Data) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{37}
}

func (x *RewardType3Data) GetGroupIDSlice() []int32 {
	if x != nil {
		return x.GroupIDSlice
	}
	return nil
}

type RewardItemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardIDList []int32 `protobuf:"varint,1,rep,packed,name=rewardIDList,proto3" json:"rewardIDList,omitempty"`
}

func (x *RewardItemInfo) Reset() {
	*x = RewardItemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardItemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardItemInfo) ProtoMessage() {}

func (x *RewardItemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardItemInfo.ProtoReflect.Descriptor instead.
func (*RewardItemInfo) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{38}
}

func (x *RewardItemInfo) GetRewardIDList() []int32 {
	if x != nil {
		return x.RewardIDList
	}
	return nil
}

type EventTriggerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventTypeMap map[int32]int32 `protobuf:"bytes,1,rep,name=EventTypeMap,proto3" json:"EventTypeMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //string is type, value is usecount
	EventIDMap   map[int32]int32 `protobuf:"bytes,2,rep,name=EventIDMap,proto3" json:"EventIDMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`     //string is cdk, value is usecount
}

func (x *EventTriggerData) Reset() {
	*x = EventTriggerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTriggerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTriggerData) ProtoMessage() {}

func (x *EventTriggerData) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTriggerData.ProtoReflect.Descriptor instead.
func (*EventTriggerData) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{39}
}

func (x *EventTriggerData) GetEventTypeMap() map[int32]int32 {
	if x != nil {
		return x.EventTypeMap
	}
	return nil
}

func (x *EventTriggerData) GetEventIDMap() map[int32]int32 {
	if x != nil {
		return x.EventIDMap
	}
	return nil
}

type CDKeyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	GroupID int32  `protobuf:"varint,2,opt,name=groupID,proto3" json:"groupID,omitempty"`
}

func (x *CDKeyInfo) Reset() {
	*x = CDKeyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDKeyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDKeyInfo) ProtoMessage() {}

func (x *CDKeyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDKeyInfo.ProtoReflect.Descriptor instead.
func (*CDKeyInfo) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{40}
}

func (x *CDKeyInfo) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *CDKeyInfo) GetGroupID() int32 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

type CdkData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CdkeyList []*CDKeyInfo `protobuf:"bytes,1,rep,name=cdkeyList,proto3" json:"cdkeyList,omitempty"`
}

func (x *CdkData) Reset() {
	*x = CdkData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CdkData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CdkData) ProtoMessage() {}

func (x *CdkData) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CdkData.ProtoReflect.Descriptor instead.
func (*CdkData) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{41}
}

func (x *CdkData) GetCdkeyList() []*CDKeyInfo {
	if x != nil {
		return x.CdkeyList
	}
	return nil
}

type WeatherInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameTime  int32           `protobuf:"varint,1,opt,name=gameTime,proto3" json:"gameTime,omitempty"`
	MeteoData map[int32]int32 `protobuf:"bytes,2,rep,name=meteoData,proto3" json:"meteoData,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Intensity map[int32]int32 `protobuf:"bytes,3,rep,name=intensity,proto3" json:"intensity,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *WeatherInfo) Reset() {
	*x = WeatherInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeatherInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeatherInfo) ProtoMessage() {}

func (x *WeatherInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeatherInfo.ProtoReflect.Descriptor instead.
func (*WeatherInfo) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{42}
}

func (x *WeatherInfo) GetGameTime() int32 {
	if x != nil {
		return x.GameTime
	}
	return 0
}

func (x *WeatherInfo) GetMeteoData() map[int32]int32 {
	if x != nil {
		return x.MeteoData
	}
	return nil
}

func (x *WeatherInfo) GetIntensity() map[int32]int32 {
	if x != nil {
		return x.Intensity
	}
	return nil
}

type MapData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SceneID     int32                  `protobuf:"varint,1,opt,name=sceneID,proto3" json:"sceneID,omitempty"`
	WeatherInfo map[int32]*WeatherInfo `protobuf:"bytes,2,rep,name=weatherInfo,proto3" json:"weatherInfo,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MapData) Reset() {
	*x = MapData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapData) ProtoMessage() {}

func (x *MapData) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapData.ProtoReflect.Descriptor instead.
func (*MapData) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{43}
}

func (x *MapData) GetSceneID() int32 {
	if x != nil {
		return x.SceneID
	}
	return 0
}

func (x *MapData) GetWeatherInfo() map[int32]*WeatherInfo {
	if x != nil {
		return x.WeatherInfo
	}
	return nil
}

type MapInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SceneID   int32               `protobuf:"varint,1,opt,name=sceneID,proto3" json:"sceneID,omitempty"`
	MapDatas  map[int32]*MapData  `protobuf:"bytes,2,rep,name=mapDatas,proto3" json:"mapDatas,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NpcData   map[int32]*NPCValue `protobuf:"bytes,3,rep,name=npcData,proto3" json:"npcData,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // npc id : NPCValue
	NpcFollow int32               `protobuf:"varint,4,opt,name=npcFollow,proto3" json:"npcFollow,omitempty"`
}

func (x *MapInfo) Reset() {
	*x = MapInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapInfo) ProtoMessage() {}

func (x *MapInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapInfo.ProtoReflect.Descriptor instead.
func (*MapInfo) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{44}
}

func (x *MapInfo) GetSceneID() int32 {
	if x != nil {
		return x.SceneID
	}
	return 0
}

func (x *MapInfo) GetMapDatas() map[int32]*MapData {
	if x != nil {
		return x.MapDatas
	}
	return nil
}

func (x *MapInfo) GetNpcData() map[int32]*NPCValue {
	if x != nil {
		return x.NpcData
	}
	return nil
}

func (x *MapInfo) GetNpcFollow() int32 {
	if x != nil {
		return x.NpcFollow
	}
	return 0
}

type SafeCityZoneState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorldID int32 `protobuf:"varint,1,opt,name=WorldID,proto3" json:"WorldID,omitempty"`
	ZoneID  int32 `protobuf:"varint,2,opt,name=ZoneID,proto3" json:"ZoneID,omitempty"`
	State   bool  `protobuf:"varint,3,opt,name=State,proto3" json:"State,omitempty"`
}

func (x *SafeCityZoneState) Reset() {
	*x = SafeCityZoneState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SafeCityZoneState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SafeCityZoneState) ProtoMessage() {}

func (x *SafeCityZoneState) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SafeCityZoneState.ProtoReflect.Descriptor instead.
func (*SafeCityZoneState) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{45}
}

func (x *SafeCityZoneState) GetWorldID() int32 {
	if x != nil {
		return x.WorldID
	}
	return 0
}

func (x *SafeCityZoneState) GetZoneID() int32 {
	if x != nil {
		return x.ZoneID
	}
	return 0
}

func (x *SafeCityZoneState) GetState() bool {
	if x != nil {
		return x.State
	}
	return false
}

type NPCValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MoodValue int32 `protobuf:"varint,1,opt,name=MoodValue,proto3" json:"MoodValue,omitempty"`
}

func (x *NPCValue) Reset() {
	*x = NPCValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NPCValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NPCValue) ProtoMessage() {}

func (x *NPCValue) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NPCValue.ProtoReflect.Descriptor instead.
func (*NPCValue) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{46}
}

func (x *NPCValue) GetMoodValue() int32 {
	if x != nil {
		return x.MoodValue
	}
	return 0
}

type PlayerMsgInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sex       int32           `protobuf:"varint,1,opt,name=sex,proto3" json:"sex,omitempty"`
	Age       int32           `protobuf:"varint,2,opt,name=age,proto3" json:"age,omitempty"`
	Rich      int32           `protobuf:"varint,3,opt,name=rich,proto3" json:"rich,omitempty"`
	Area      int32           `protobuf:"varint,4,opt,name=area,proto3" json:"area,omitempty"`
	Name      string          `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Signature string          `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
	Birthday  int32           `protobuf:"varint,7,opt,name=birthday,proto3" json:"birthday,omitempty"`
	HeadIcon  int32           `protobuf:"varint,8,opt,name=headIcon,proto3" json:"headIcon,omitempty"`
	ModelPara map[int32]int32 `protobuf:"bytes,9,rep,name=modelPara,proto3" json:"modelPara,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *PlayerMsgInfo) Reset() {
	*x = PlayerMsgInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerMsgInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerMsgInfo) ProtoMessage() {}

func (x *PlayerMsgInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerMsgInfo.ProtoReflect.Descriptor instead.
func (*PlayerMsgInfo) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{47}
}

func (x *PlayerMsgInfo) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *PlayerMsgInfo) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *PlayerMsgInfo) GetRich() int32 {
	if x != nil {
		return x.Rich
	}
	return 0
}

func (x *PlayerMsgInfo) GetArea() int32 {
	if x != nil {
		return x.Area
	}
	return 0
}

func (x *PlayerMsgInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlayerMsgInfo) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *PlayerMsgInfo) GetBirthday() int32 {
	if x != nil {
		return x.Birthday
	}
	return 0
}

func (x *PlayerMsgInfo) GetHeadIcon() int32 {
	if x != nil {
		return x.HeadIcon
	}
	return 0
}

func (x *PlayerMsgInfo) GetModelPara() map[int32]int32 {
	if x != nil {
		return x.ModelPara
	}
	return nil
}

type PlayerSaveData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerID             uint64                  `protobuf:"varint,1,opt,name=playerID,proto3" json:"playerID,omitempty"`
	State                int32                   `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	Vip                  int32                   `protobuf:"varint,4,opt,name=vip,proto3" json:"vip,omitempty"`
	Energy               int32                   `protobuf:"varint,6,opt,name=energy,proto3" json:"energy,omitempty"`
	EnergyIncTime        int32                   `protobuf:"varint,7,opt,name=energyIncTime,proto3" json:"energyIncTime,omitempty"`
	RewardData           *RewardData             `protobuf:"bytes,9,opt,name=rewardData,proto3" json:"rewardData,omitempty"`
	Logintime            int32                   `protobuf:"varint,10,opt,name=logintime,proto3" json:"logintime,omitempty"`
	Logouttime           int32                   `protobuf:"varint,11,opt,name=Logouttime,proto3" json:"Logouttime,omitempty"`
	Playtime             int32                   `protobuf:"varint,12,opt,name=playtime,proto3" json:"playtime,omitempty"`
	GuidSeed             uint32                  `protobuf:"varint,13,opt,name=guidSeed,proto3" json:"guidSeed,omitempty"`
	RegisterTime         int32                   `protobuf:"varint,14,opt,name=registerTime,proto3" json:"registerTime,omitempty"`
	PlayerLevel          int32                   `protobuf:"varint,15,opt,name=PlayerLevel,proto3" json:"PlayerLevel,omitempty"`
	PlayerExp            int32                   `protobuf:"varint,16,opt,name=PlayerExp,proto3" json:"PlayerExp,omitempty"`
	PlayerBaseInfo       *PlayerMsgInfo          `protobuf:"bytes,17,opt,name=playerBaseInfo,proto3" json:"playerBaseInfo,omitempty"`
	ElfDataInfo          *ElfDataInfo            `protobuf:"bytes,18,opt,name=elfDataInfo,proto3" json:"elfDataInfo,omitempty"`
	UnlockedHeadIcon     []int32                 `protobuf:"varint,19,rep,packed,name=unlockedHeadIcon,proto3" json:"unlockedHeadIcon,omitempty"`
	LastCityWorldID      int32                   `protobuf:"varint,20,opt,name=lastCityWorldID,proto3" json:"lastCityWorldID,omitempty"`
	CurrentCityWorldID   int32                   `protobuf:"varint,21,opt,name=currentCityWorldID,proto3" json:"currentCityWorldID,omitempty"`
	LastCityZoneID       int32                   `protobuf:"varint,22,opt,name=lastCityZoneID,proto3" json:"lastCityZoneID,omitempty"`
	CurrentCityZoneID    int32                   `protobuf:"varint,23,opt,name=currentCityZoneID,proto3" json:"currentCityZoneID,omitempty"`
	ZoneStateData        []*SafeCityZoneState    `protobuf:"bytes,24,rep,name=zoneStateData,proto3" json:"zoneStateData,omitempty"`
	DramaRecords         []int32                 `protobuf:"varint,25,rep,packed,name=dramaRecords,proto3" json:"dramaRecords,omitempty"`
	RoleData             *RoleDataInfo           `protobuf:"bytes,131,opt,name=roleData,proto3" json:"roleData,omitempty"`
	BagData              *BagDataInfo            `protobuf:"bytes,132,opt,name=bagData,proto3" json:"bagData,omitempty"`
	TaskData             *TaskDataInfo           `protobuf:"bytes,133,opt,name=taskData,proto3" json:"taskData,omitempty"`
	WeaponData           *WeaponDataInfo         `protobuf:"bytes,134,opt,name=weaponData,proto3" json:"weaponData,omitempty"`
	ReportMailData       *PMDataInfo             `protobuf:"bytes,135,opt,name=reportMailData,proto3" json:"reportMailData,omitempty"`
	BbsData              *BBSDataInfo            `protobuf:"bytes,136,opt,name=bbsData,proto3" json:"bbsData,omitempty"`
	KvData               *KVDataInfo             `protobuf:"bytes,137,opt,name=kvData,proto3" json:"kvData,omitempty"`
	RecordsData          *RecordDataInfo         `protobuf:"bytes,138,opt,name=recordsData,proto3" json:"recordsData,omitempty"`
	GpData               *GamePhoneDataInfo      `protobuf:"bytes,139,opt,name=gpData,proto3" json:"gpData,omitempty"`
	MrDataInfo           *DungeonRecordInfo      `protobuf:"bytes,140,opt,name=mrDataInfo,proto3" json:"mrDataInfo,omitempty"`
	ChipData             *ChipDataInfo           `protobuf:"bytes,141,opt,name=chipData,proto3" json:"chipData,omitempty"`
	MetaValueData        *MetaValueDataInfo      `protobuf:"bytes,142,opt,name=metaValueData,proto3" json:"metaValueData,omitempty"`
	PresitgeData         *PresitgeDataInfo       `protobuf:"bytes,143,opt,name=presitgeData,proto3" json:"presitgeData,omitempty"`
	EventData            *EventTriggerData       `protobuf:"bytes,144,opt,name=eventData,proto3" json:"eventData,omitempty"`
	ActivityInfo         *ActivityInfo           `protobuf:"bytes,145,opt,name=activityInfo,proto3" json:"activityInfo,omitempty"`
	Achieve              *Achievement            `protobuf:"bytes,146,opt,name=achieve,proto3" json:"achieve,omitempty"`
	ShopData             *PlayerShop             `protobuf:"bytes,147,opt,name=ShopData,proto3" json:"ShopData,omitempty"`
	ConsecutiveLoginDays int32                   `protobuf:"varint,148,opt,name=ConsecutiveLoginDays,proto3" json:"ConsecutiveLoginDays,omitempty"`
	CumulativeLoginDays  int32                   `protobuf:"varint,149,opt,name=CumulativeLoginDays,proto3" json:"CumulativeLoginDays,omitempty"`
	AsyncInteractionData *PlayerAsyncInteraction `protobuf:"bytes,150,opt,name=asyncInteractionData,proto3" json:"asyncInteractionData,omitempty"`
	MapInfo              *MapInfo                `protobuf:"bytes,151,opt,name=mapInfo,proto3" json:"mapInfo,omitempty"`
	CdkData              *CdkData                `protobuf:"bytes,152,opt,name=cdkData,proto3" json:"cdkData,omitempty"`
	FriendData           *FriendData             `protobuf:"bytes,153,opt,name=friendData,proto3" json:"friendData,omitempty"`
	FightWallRecord      map[int32]int32         `protobuf:"bytes,154,rep,name=fightWallRecord,proto3" json:"fightWallRecord,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	BarrageRecord        map[int32]int32         `protobuf:"bytes,155,rep,name=barrageRecord,proto3" json:"barrageRecord,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	CollectInfo          map[int32]*Collect      `protobuf:"bytes,156,rep,name=collectInfo,proto3" json:"collectInfo,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Books                *Book                   `protobuf:"bytes,157,opt,name=books,proto3" json:"books,omitempty"`
	Photo                *PhotoDataInfo          `protobuf:"bytes,158,opt,name=photo,proto3" json:"photo,omitempty"`
	FlashGame            *FlashGameData          `protobuf:"bytes,159,opt,name=flashGame,proto3" json:"flashGame,omitempty"`
	FightTeam            *FightTeamGroupDataInfo `protobuf:"bytes,160,opt,name=fightTeam,proto3" json:"fightTeam,omitempty"`
	GuideData            *PlayerGuideData        `protobuf:"bytes,161,opt,name=guideData,proto3" json:"guideData,omitempty"`
}

func (x *PlayerSaveData) Reset() {
	*x = PlayerSaveData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSaveData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSaveData) ProtoMessage() {}

func (x *PlayerSaveData) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSaveData.ProtoReflect.Descriptor instead.
func (*PlayerSaveData) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{48}
}

func (x *PlayerSaveData) GetPlayerID() uint64 {
	if x != nil {
		return x.PlayerID
	}
	return 0
}

func (x *PlayerSaveData) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *PlayerSaveData) GetVip() int32 {
	if x != nil {
		return x.Vip
	}
	return 0
}

func (x *PlayerSaveData) GetEnergy() int32 {
	if x != nil {
		return x.Energy
	}
	return 0
}

func (x *PlayerSaveData) GetEnergyIncTime() int32 {
	if x != nil {
		return x.EnergyIncTime
	}
	return 0
}

func (x *PlayerSaveData) GetRewardData() *RewardData {
	if x != nil {
		return x.RewardData
	}
	return nil
}

func (x *PlayerSaveData) GetLogintime() int32 {
	if x != nil {
		return x.Logintime
	}
	return 0
}

func (x *PlayerSaveData) GetLogouttime() int32 {
	if x != nil {
		return x.Logouttime
	}
	return 0
}

func (x *PlayerSaveData) GetPlaytime() int32 {
	if x != nil {
		return x.Playtime
	}
	return 0
}

func (x *PlayerSaveData) GetGuidSeed() uint32 {
	if x != nil {
		return x.GuidSeed
	}
	return 0
}

func (x *PlayerSaveData) GetRegisterTime() int32 {
	if x != nil {
		return x.RegisterTime
	}
	return 0
}

func (x *PlayerSaveData) GetPlayerLevel() int32 {
	if x != nil {
		return x.PlayerLevel
	}
	return 0
}

func (x *PlayerSaveData) GetPlayerExp() int32 {
	if x != nil {
		return x.PlayerExp
	}
	return 0
}

func (x *PlayerSaveData) GetPlayerBaseInfo() *PlayerMsgInfo {
	if x != nil {
		return x.PlayerBaseInfo
	}
	return nil
}

func (x *PlayerSaveData) GetElfDataInfo() *ElfDataInfo {
	if x != nil {
		return x.ElfDataInfo
	}
	return nil
}

func (x *PlayerSaveData) GetUnlockedHeadIcon() []int32 {
	if x != nil {
		return x.UnlockedHeadIcon
	}
	return nil
}

func (x *PlayerSaveData) GetLastCityWorldID() int32 {
	if x != nil {
		return x.LastCityWorldID
	}
	return 0
}

func (x *PlayerSaveData) GetCurrentCityWorldID() int32 {
	if x != nil {
		return x.CurrentCityWorldID
	}
	return 0
}

func (x *PlayerSaveData) GetLastCityZoneID() int32 {
	if x != nil {
		return x.LastCityZoneID
	}
	return 0
}

func (x *PlayerSaveData) GetCurrentCityZoneID() int32 {
	if x != nil {
		return x.CurrentCityZoneID
	}
	return 0
}

func (x *PlayerSaveData) GetZoneStateData() []*SafeCityZoneState {
	if x != nil {
		return x.ZoneStateData
	}
	return nil
}

func (x *PlayerSaveData) GetDramaRecords() []int32 {
	if x != nil {
		return x.DramaRecords
	}
	return nil
}

func (x *PlayerSaveData) GetRoleData() *RoleDataInfo {
	if x != nil {
		return x.RoleData
	}
	return nil
}

func (x *PlayerSaveData) GetBagData() *BagDataInfo {
	if x != nil {
		return x.BagData
	}
	return nil
}

func (x *PlayerSaveData) GetTaskData() *TaskDataInfo {
	if x != nil {
		return x.TaskData
	}
	return nil
}

func (x *PlayerSaveData) GetWeaponData() *WeaponDataInfo {
	if x != nil {
		return x.WeaponData
	}
	return nil
}

func (x *PlayerSaveData) GetReportMailData() *PMDataInfo {
	if x != nil {
		return x.ReportMailData
	}
	return nil
}

func (x *PlayerSaveData) GetBbsData() *BBSDataInfo {
	if x != nil {
		return x.BbsData
	}
	return nil
}

func (x *PlayerSaveData) GetKvData() *KVDataInfo {
	if x != nil {
		return x.KvData
	}
	return nil
}

func (x *PlayerSaveData) GetRecordsData() *RecordDataInfo {
	if x != nil {
		return x.RecordsData
	}
	return nil
}

func (x *PlayerSaveData) GetGpData() *GamePhoneDataInfo {
	if x != nil {
		return x.GpData
	}
	return nil
}

func (x *PlayerSaveData) GetMrDataInfo() *DungeonRecordInfo {
	if x != nil {
		return x.MrDataInfo
	}
	return nil
}

func (x *PlayerSaveData) GetChipData() *ChipDataInfo {
	if x != nil {
		return x.ChipData
	}
	return nil
}

func (x *PlayerSaveData) GetMetaValueData() *MetaValueDataInfo {
	if x != nil {
		return x.MetaValueData
	}
	return nil
}

func (x *PlayerSaveData) GetPresitgeData() *PresitgeDataInfo {
	if x != nil {
		return x.PresitgeData
	}
	return nil
}

func (x *PlayerSaveData) GetEventData() *EventTriggerData {
	if x != nil {
		return x.EventData
	}
	return nil
}

func (x *PlayerSaveData) GetActivityInfo() *ActivityInfo {
	if x != nil {
		return x.ActivityInfo
	}
	return nil
}

func (x *PlayerSaveData) GetAchieve() *Achievement {
	if x != nil {
		return x.Achieve
	}
	return nil
}

func (x *PlayerSaveData) GetShopData() *PlayerShop {
	if x != nil {
		return x.ShopData
	}
	return nil
}

func (x *PlayerSaveData) GetConsecutiveLoginDays() int32 {
	if x != nil {
		return x.ConsecutiveLoginDays
	}
	return 0
}

func (x *PlayerSaveData) GetCumulativeLoginDays() int32 {
	if x != nil {
		return x.CumulativeLoginDays
	}
	return 0
}

func (x *PlayerSaveData) GetAsyncInteractionData() *PlayerAsyncInteraction {
	if x != nil {
		return x.AsyncInteractionData
	}
	return nil
}

func (x *PlayerSaveData) GetMapInfo() *MapInfo {
	if x != nil {
		return x.MapInfo
	}
	return nil
}

func (x *PlayerSaveData) GetCdkData() *CdkData {
	if x != nil {
		return x.CdkData
	}
	return nil
}

func (x *PlayerSaveData) GetFriendData() *FriendData {
	if x != nil {
		return x.FriendData
	}
	return nil
}

func (x *PlayerSaveData) GetFightWallRecord() map[int32]int32 {
	if x != nil {
		return x.FightWallRecord
	}
	return nil
}

func (x *PlayerSaveData) GetBarrageRecord() map[int32]int32 {
	if x != nil {
		return x.BarrageRecord
	}
	return nil
}

func (x *PlayerSaveData) GetCollectInfo() map[int32]*Collect {
	if x != nil {
		return x.CollectInfo
	}
	return nil
}

func (x *PlayerSaveData) GetBooks() *Book {
	if x != nil {
		return x.Books
	}
	return nil
}

func (x *PlayerSaveData) GetPhoto() *PhotoDataInfo {
	if x != nil {
		return x.Photo
	}
	return nil
}

func (x *PlayerSaveData) GetFlashGame() *FlashGameData {
	if x != nil {
		return x.FlashGame
	}
	return nil
}

func (x *PlayerSaveData) GetFightTeam() *FightTeamGroupDataInfo {
	if x != nil {
		return x.FightTeam
	}
	return nil
}

func (x *PlayerSaveData) GetGuideData() *PlayerGuideData {
	if x != nil {
		return x.GuideData
	}
	return nil
}

type PhotoDataInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhotoIDs []int32 `protobuf:"varint,1,rep,packed,name=photoIDs,proto3" json:"photoIDs,omitempty"`
}

func (x *PhotoDataInfo) Reset() {
	*x = PhotoDataInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotoDataInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoDataInfo) ProtoMessage() {}

func (x *PhotoDataInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoDataInfo.ProtoReflect.Descriptor instead.
func (*PhotoDataInfo) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{49}
}

func (x *PhotoDataInfo) GetPhotoIDs() []int32 {
	if x != nil {
		return x.PhotoIDs
	}
	return nil
}

type PlayerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerID             uint64                  `protobuf:"varint,1,opt,name=playerID,proto3" json:"playerID,omitempty"`
	State                int32                   `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	Vip                  int32                   `protobuf:"varint,4,opt,name=vip,proto3" json:"vip,omitempty"`
	Energy               int32                   `protobuf:"varint,6,opt,name=energy,proto3" json:"energy,omitempty"`
	EnergyIncTime        int32                   `protobuf:"varint,7,opt,name=energyIncTime,proto3" json:"energyIncTime,omitempty"`
	RewardData           *RewardData             `protobuf:"bytes,9,opt,name=rewardData,proto3" json:"rewardData,omitempty"`
	Logintime            int32                   `protobuf:"varint,10,opt,name=logintime,proto3" json:"logintime,omitempty"`
	Logouttime           int32                   `protobuf:"varint,11,opt,name=Logouttime,proto3" json:"Logouttime,omitempty"`
	Playtime             int32                   `protobuf:"varint,12,opt,name=playtime,proto3" json:"playtime,omitempty"`
	GuidSeed             uint32                  `protobuf:"varint,13,opt,name=guidSeed,proto3" json:"guidSeed,omitempty"`
	RegisterTime         int32                   `protobuf:"varint,14,opt,name=registerTime,proto3" json:"registerTime,omitempty"`
	PlayerLevel          int32                   `protobuf:"varint,15,opt,name=PlayerLevel,proto3" json:"PlayerLevel,omitempty"`
	PlayerExp            int32                   `protobuf:"varint,16,opt,name=PlayerExp,proto3" json:"PlayerExp,omitempty"`
	PlayerBaseInfo       *PlayerMsgInfo          `protobuf:"bytes,17,opt,name=playerBaseInfo,proto3" json:"playerBaseInfo,omitempty"`
	ElfDataInfo          *ElfDataInfo            `protobuf:"bytes,18,opt,name=elfDataInfo,proto3" json:"elfDataInfo,omitempty"`
	UnlockedHeadIcon     []int32                 `protobuf:"varint,19,rep,packed,name=unlockedHeadIcon,proto3" json:"unlockedHeadIcon,omitempty"`
	LastCityWorldID      int32                   `protobuf:"varint,20,opt,name=lastCityWorldID,proto3" json:"lastCityWorldID,omitempty"`
	CurrentCityWorldID   int32                   `protobuf:"varint,21,opt,name=currentCityWorldID,proto3" json:"currentCityWorldID,omitempty"`
	LastCityZoneID       int32                   `protobuf:"varint,22,opt,name=lastCityZoneID,proto3" json:"lastCityZoneID,omitempty"`
	CurrentCityZoneID    int32                   `protobuf:"varint,23,opt,name=currentCityZoneID,proto3" json:"currentCityZoneID,omitempty"`
	ZoneStateData        []*SafeCityZoneState    `protobuf:"bytes,24,rep,name=zoneStateData,proto3" json:"zoneStateData,omitempty"`
	DramaRecords         []int32                 `protobuf:"varint,25,rep,packed,name=dramaRecords,proto3" json:"dramaRecords,omitempty"`
	PauseTime            int32                   `protobuf:"varint,26,opt,name=pauseTime,proto3" json:"pauseTime,omitempty"`
	RoleData             *RoleDataInfo           `protobuf:"bytes,131,opt,name=roleData,proto3" json:"roleData,omitempty"`
	BagData              *BagDataInfo            `protobuf:"bytes,132,opt,name=bagData,proto3" json:"bagData,omitempty"`
	TaskData             *TaskDataInfo           `protobuf:"bytes,133,opt,name=taskData,proto3" json:"taskData,omitempty"`
	WeaponData           *WeaponDataInfo         `protobuf:"bytes,134,opt,name=weaponData,proto3" json:"weaponData,omitempty"`
	ReportMailData       *PMDataInfo             `protobuf:"bytes,135,opt,name=reportMailData,proto3" json:"reportMailData,omitempty"`
	BbsData              *BBSDataInfo            `protobuf:"bytes,136,opt,name=bbsData,proto3" json:"bbsData,omitempty"`
	KvData               *KVDataInfo             `protobuf:"bytes,137,opt,name=kvData,proto3" json:"kvData,omitempty"`
	RecordsData          *RecordDataInfo         `protobuf:"bytes,138,opt,name=recordsData,proto3" json:"recordsData,omitempty"`
	GpData               *GamePhoneDataInfo      `protobuf:"bytes,139,opt,name=gpData,proto3" json:"gpData,omitempty"`
	MrDataInfo           *DungeonRecordInfo      `protobuf:"bytes,140,opt,name=mrDataInfo,proto3" json:"mrDataInfo,omitempty"`
	ChipData             *ChipDataInfo           `protobuf:"bytes,141,opt,name=chipData,proto3" json:"chipData,omitempty"`
	MetaValueData        *MetaValueDataInfo      `protobuf:"bytes,142,opt,name=metaValueData,proto3" json:"metaValueData,omitempty"`
	PresitgeData         *PresitgeDataInfo       `protobuf:"bytes,143,opt,name=presitgeData,proto3" json:"presitgeData,omitempty"`
	EventData            *EventTriggerData       `protobuf:"bytes,144,opt,name=eventData,proto3" json:"eventData,omitempty"`
	ActivityInfo         *ActivityInfo           `protobuf:"bytes,145,opt,name=activityInfo,proto3" json:"activityInfo,omitempty"`
	Achieve              *Achievement            `protobuf:"bytes,146,opt,name=achieve,proto3" json:"achieve,omitempty"`
	ShopData             *PlayerShop             `protobuf:"bytes,147,opt,name=ShopData,proto3" json:"ShopData,omitempty"`
	ConsecutiveLoginDays int32                   `protobuf:"varint,148,opt,name=ConsecutiveLoginDays,proto3" json:"ConsecutiveLoginDays,omitempty"`
	CumulativeLoginDays  int32                   `protobuf:"varint,149,opt,name=CumulativeLoginDays,proto3" json:"CumulativeLoginDays,omitempty"`
	AsyncInteractionData *PlayerAsyncInteraction `protobuf:"bytes,150,opt,name=asyncInteractionData,proto3" json:"asyncInteractionData,omitempty"`
	MapInfo              *MapInfo                `protobuf:"bytes,151,opt,name=mapInfo,proto3" json:"mapInfo,omitempty"`
	CdkData              *CdkData                `protobuf:"bytes,152,opt,name=cdkData,proto3" json:"cdkData,omitempty"`
	FriendData           *FriendData             `protobuf:"bytes,153,opt,name=friendData,proto3" json:"friendData,omitempty"`
	FightWallRecord      map[int32]int32         `protobuf:"bytes,154,rep,name=fightWallRecord,proto3" json:"fightWallRecord,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	BarrageRecord        map[int32]int32         `protobuf:"bytes,155,rep,name=barrageRecord,proto3" json:"barrageRecord,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	CollectInfo          map[int32]*Collect      `protobuf:"bytes,156,rep,name=collectInfo,proto3" json:"collectInfo,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Books                *Book                   `protobuf:"bytes,157,opt,name=books,proto3" json:"books,omitempty"`
	Photo                *PhotoDataInfo          `protobuf:"bytes,158,opt,name=photo,proto3" json:"photo,omitempty"`
	FlashGame            *FlashGameData          `protobuf:"bytes,159,opt,name=flashGame,proto3" json:"flashGame,omitempty"`
	PrayData             *PrayData               `protobuf:"bytes,160,opt,name=PrayData,proto3" json:"PrayData,omitempty"`
	InstFightData        *InstanceFight          `protobuf:"bytes,162,opt,name=InstFightData,proto3" json:"InstFightData,omitempty"`
	FightTeam            *FightTeamGroupDataInfo `protobuf:"bytes,163,opt,name=fightTeam,proto3" json:"fightTeam,omitempty"`
	GuideData            *PlayerGuideData        `protobuf:"bytes,164,opt,name=guideData,proto3" json:"guideData,omitempty"`
}

func (x *PlayerData) Reset() {
	*x = PlayerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerData) ProtoMessage() {}

func (x *PlayerData) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerData.ProtoReflect.Descriptor instead.
func (*PlayerData) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{50}
}

func (x *PlayerData) GetPlayerID() uint64 {
	if x != nil {
		return x.PlayerID
	}
	return 0
}

func (x *PlayerData) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *PlayerData) GetVip() int32 {
	if x != nil {
		return x.Vip
	}
	return 0
}

func (x *PlayerData) GetEnergy() int32 {
	if x != nil {
		return x.Energy
	}
	return 0
}

func (x *PlayerData) GetEnergyIncTime() int32 {
	if x != nil {
		return x.EnergyIncTime
	}
	return 0
}

func (x *PlayerData) GetRewardData() *RewardData {
	if x != nil {
		return x.RewardData
	}
	return nil
}

func (x *PlayerData) GetLogintime() int32 {
	if x != nil {
		return x.Logintime
	}
	return 0
}

func (x *PlayerData) GetLogouttime() int32 {
	if x != nil {
		return x.Logouttime
	}
	return 0
}

func (x *PlayerData) GetPlaytime() int32 {
	if x != nil {
		return x.Playtime
	}
	return 0
}

func (x *PlayerData) GetGuidSeed() uint32 {
	if x != nil {
		return x.GuidSeed
	}
	return 0
}

func (x *PlayerData) GetRegisterTime() int32 {
	if x != nil {
		return x.RegisterTime
	}
	return 0
}

func (x *PlayerData) GetPlayerLevel() int32 {
	if x != nil {
		return x.PlayerLevel
	}
	return 0
}

func (x *PlayerData) GetPlayerExp() int32 {
	if x != nil {
		return x.PlayerExp
	}
	return 0
}

func (x *PlayerData) GetPlayerBaseInfo() *PlayerMsgInfo {
	if x != nil {
		return x.PlayerBaseInfo
	}
	return nil
}

func (x *PlayerData) GetElfDataInfo() *ElfDataInfo {
	if x != nil {
		return x.ElfDataInfo
	}
	return nil
}

func (x *PlayerData) GetUnlockedHeadIcon() []int32 {
	if x != nil {
		return x.UnlockedHeadIcon
	}
	return nil
}

func (x *PlayerData) GetLastCityWorldID() int32 {
	if x != nil {
		return x.LastCityWorldID
	}
	return 0
}

func (x *PlayerData) GetCurrentCityWorldID() int32 {
	if x != nil {
		return x.CurrentCityWorldID
	}
	return 0
}

func (x *PlayerData) GetLastCityZoneID() int32 {
	if x != nil {
		return x.LastCityZoneID
	}
	return 0
}

func (x *PlayerData) GetCurrentCityZoneID() int32 {
	if x != nil {
		return x.CurrentCityZoneID
	}
	return 0
}

func (x *PlayerData) GetZoneStateData() []*SafeCityZoneState {
	if x != nil {
		return x.ZoneStateData
	}
	return nil
}

func (x *PlayerData) GetDramaRecords() []int32 {
	if x != nil {
		return x.DramaRecords
	}
	return nil
}

func (x *PlayerData) GetPauseTime() int32 {
	if x != nil {
		return x.PauseTime
	}
	return 0
}

func (x *PlayerData) GetRoleData() *RoleDataInfo {
	if x != nil {
		return x.RoleData
	}
	return nil
}

func (x *PlayerData) GetBagData() *BagDataInfo {
	if x != nil {
		return x.BagData
	}
	return nil
}

func (x *PlayerData) GetTaskData() *TaskDataInfo {
	if x != nil {
		return x.TaskData
	}
	return nil
}

func (x *PlayerData) GetWeaponData() *WeaponDataInfo {
	if x != nil {
		return x.WeaponData
	}
	return nil
}

func (x *PlayerData) GetReportMailData() *PMDataInfo {
	if x != nil {
		return x.ReportMailData
	}
	return nil
}

func (x *PlayerData) GetBbsData() *BBSDataInfo {
	if x != nil {
		return x.BbsData
	}
	return nil
}

func (x *PlayerData) GetKvData() *KVDataInfo {
	if x != nil {
		return x.KvData
	}
	return nil
}

func (x *PlayerData) GetRecordsData() *RecordDataInfo {
	if x != nil {
		return x.RecordsData
	}
	return nil
}

func (x *PlayerData) GetGpData() *GamePhoneDataInfo {
	if x != nil {
		return x.GpData
	}
	return nil
}

func (x *PlayerData) GetMrDataInfo() *DungeonRecordInfo {
	if x != nil {
		return x.MrDataInfo
	}
	return nil
}

func (x *PlayerData) GetChipData() *ChipDataInfo {
	if x != nil {
		return x.ChipData
	}
	return nil
}

func (x *PlayerData) GetMetaValueData() *MetaValueDataInfo {
	if x != nil {
		return x.MetaValueData
	}
	return nil
}

func (x *PlayerData) GetPresitgeData() *PresitgeDataInfo {
	if x != nil {
		return x.PresitgeData
	}
	return nil
}

func (x *PlayerData) GetEventData() *EventTriggerData {
	if x != nil {
		return x.EventData
	}
	return nil
}

func (x *PlayerData) GetActivityInfo() *ActivityInfo {
	if x != nil {
		return x.ActivityInfo
	}
	return nil
}

func (x *PlayerData) GetAchieve() *Achievement {
	if x != nil {
		return x.Achieve
	}
	return nil
}

func (x *PlayerData) GetShopData() *PlayerShop {
	if x != nil {
		return x.ShopData
	}
	return nil
}

func (x *PlayerData) GetConsecutiveLoginDays() int32 {
	if x != nil {
		return x.ConsecutiveLoginDays
	}
	return 0
}

func (x *PlayerData) GetCumulativeLoginDays() int32 {
	if x != nil {
		return x.CumulativeLoginDays
	}
	return 0
}

func (x *PlayerData) GetAsyncInteractionData() *PlayerAsyncInteraction {
	if x != nil {
		return x.AsyncInteractionData
	}
	return nil
}

func (x *PlayerData) GetMapInfo() *MapInfo {
	if x != nil {
		return x.MapInfo
	}
	return nil
}

func (x *PlayerData) GetCdkData() *CdkData {
	if x != nil {
		return x.CdkData
	}
	return nil
}

func (x *PlayerData) GetFriendData() *FriendData {
	if x != nil {
		return x.FriendData
	}
	return nil
}

func (x *PlayerData) GetFightWallRecord() map[int32]int32 {
	if x != nil {
		return x.FightWallRecord
	}
	return nil
}

func (x *PlayerData) GetBarrageRecord() map[int32]int32 {
	if x != nil {
		return x.BarrageRecord
	}
	return nil
}

func (x *PlayerData) GetCollectInfo() map[int32]*Collect {
	if x != nil {
		return x.CollectInfo
	}
	return nil
}

func (x *PlayerData) GetBooks() *Book {
	if x != nil {
		return x.Books
	}
	return nil
}

func (x *PlayerData) GetPhoto() *PhotoDataInfo {
	if x != nil {
		return x.Photo
	}
	return nil
}

func (x *PlayerData) GetFlashGame() *FlashGameData {
	if x != nil {
		return x.FlashGame
	}
	return nil
}

func (x *PlayerData) GetPrayData() *PrayData {
	if x != nil {
		return x.PrayData
	}
	return nil
}

func (x *PlayerData) GetInstFightData() *InstanceFight {
	if x != nil {
		return x.InstFightData
	}
	return nil
}

func (x *PlayerData) GetFightTeam() *FightTeamGroupDataInfo {
	if x != nil {
		return x.FightTeam
	}
	return nil
}

func (x *PlayerData) GetGuideData() *PlayerGuideData {
	if x != nil {
		return x.GuideData
	}
	return nil
}

type FlashGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Barrage     map[int32]int32 `protobuf:"bytes,1,rep,name=barrage,proto3" json:"barrage,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Puzzle      map[int32]int32 `protobuf:"bytes,2,rep,name=puzzle,proto3" json:"puzzle,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	DiffChecker map[int32]int32 `protobuf:"bytes,3,rep,name=diffChecker,proto3" json:"diffChecker,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	QteRecord   map[int32]int32 `protobuf:"bytes,4,rep,name=qteRecord,proto3" json:"qteRecord,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *FlashGameData) Reset() {
	*x = FlashGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlashGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlashGameData) ProtoMessage() {}

func (x *FlashGameData) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlashGameData.ProtoReflect.Descriptor instead.
func (*FlashGameData) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{51}
}

func (x *FlashGameData) GetBarrage() map[int32]int32 {
	if x != nil {
		return x.Barrage
	}
	return nil
}

func (x *FlashGameData) GetPuzzle() map[int32]int32 {
	if x != nil {
		return x.Puzzle
	}
	return nil
}

func (x *FlashGameData) GetDiffChecker() map[int32]int32 {
	if x != nil {
		return x.DiffChecker
	}
	return nil
}

func (x *FlashGameData) GetQteRecord() map[int32]int32 {
	if x != nil {
		return x.QteRecord
	}
	return nil
}

type PlayerStorageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PlayerStorageData) Reset() {
	*x = PlayerStorageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerStorageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerStorageData) ProtoMessage() {}

func (x *PlayerStorageData) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerStorageData.ProtoReflect.Descriptor instead.
func (*PlayerStorageData) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{52}
}

type ScenePlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerID uint64 `protobuf:"varint,1,opt,name=playerID,proto3" json:"playerID,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ScenePlayer) Reset() {
	*x = ScenePlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScenePlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenePlayer) ProtoMessage() {}

func (x *ScenePlayer) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenePlayer.ProtoReflect.Descriptor instead.
func (*ScenePlayer) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{53}
}

func (x *ScenePlayer) GetPlayerID() uint64 {
	if x != nil {
		return x.PlayerID
	}
	return 0
}

func (x *ScenePlayer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type FightPlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerID    uint64                    `protobuf:"varint,1,opt,name=playerID,proto3" json:"playerID,omitempty"`
	Name        string                    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Level       int32                     `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	WeaponDatas map[int32]*WeaponItemInfo `protobuf:"bytes,4,rep,name=WeaponDatas,proto3" json:"WeaponDatas,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RoleDatas   map[int32]*RoleItemInfo   `protobuf:"bytes,5,rep,name=roleDatas,proto3" json:"roleDatas,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ChipDatas   map[int32]*ChipItemInfo   `protobuf:"bytes,6,rep,name=ChipDatas,proto3" json:"ChipDatas,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FightPlayerInfo) Reset() {
	*x = FightPlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightPlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightPlayerInfo) ProtoMessage() {}

func (x *FightPlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightPlayerInfo.ProtoReflect.Descriptor instead.
func (*FightPlayerInfo) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{54}
}

func (x *FightPlayerInfo) GetPlayerID() uint64 {
	if x != nil {
		return x.PlayerID
	}
	return 0
}

func (x *FightPlayerInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FightPlayerInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *FightPlayerInfo) GetWeaponDatas() map[int32]*WeaponItemInfo {
	if x != nil {
		return x.WeaponDatas
	}
	return nil
}

func (x *FightPlayerInfo) GetRoleDatas() map[int32]*RoleItemInfo {
	if x != nil {
		return x.RoleDatas
	}
	return nil
}

func (x *FightPlayerInfo) GetChipDatas() map[int32]*ChipItemInfo {
	if x != nil {
		return x.ChipDatas
	}
	return nil
}

type TransPlayerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID  uint64      `protobuf:"varint,1,opt,name=accountID,proto3" json:"accountID,omitempty"`
	GateGUID   string      `protobuf:"bytes,2,opt,name=gateGUID,proto3" json:"gateGUID,omitempty"`
	PlayerList []uint64    `protobuf:"varint,4,rep,packed,name=playerList,proto3" json:"playerList,omitempty"`
	PlayerData *PlayerData `protobuf:"bytes,5,opt,name=playerData,proto3" json:"playerData,omitempty"`
}

func (x *TransPlayerData) Reset() {
	*x = TransPlayerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransPlayerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransPlayerData) ProtoMessage() {}

func (x *TransPlayerData) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransPlayerData.ProtoReflect.Descriptor instead.
func (*TransPlayerData) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{55}
}

func (x *TransPlayerData) GetAccountID() uint64 {
	if x != nil {
		return x.AccountID
	}
	return 0
}

func (x *TransPlayerData) GetGateGUID() string {
	if x != nil {
		return x.GateGUID
	}
	return ""
}

func (x *TransPlayerData) GetPlayerList() []uint64 {
	if x != nil {
		return x.PlayerList
	}
	return nil
}

func (x *TransPlayerData) GetPlayerData() *PlayerData {
	if x != nil {
		return x.PlayerData
	}
	return nil
}

type MetaValueInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value               int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`                             // 数值
	StartTimestamp      int32 `protobuf:"varint,2,opt,name=startTimestamp,proto3" json:"startTimestamp,omitempty"`           // 起始时间戳
	LastUpdateTimestamp int32 `protobuf:"varint,3,opt,name=lastUpdateTimestamp,proto3" json:"lastUpdateTimestamp,omitempty"` // 上次更新时间戳
}

func (x *MetaValueInfo) Reset() {
	*x = MetaValueInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaValueInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaValueInfo) ProtoMessage() {}

func (x *MetaValueInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaValueInfo.ProtoReflect.Descriptor instead.
func (*MetaValueInfo) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{56}
}

func (x *MetaValueInfo) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *MetaValueInfo) GetStartTimestamp() int32 {
	if x != nil {
		return x.StartTimestamp
	}
	return 0
}

func (x *MetaValueInfo) GetLastUpdateTimestamp() int32 {
	if x != nil {
		return x.LastUpdateTimestamp
	}
	return 0
}

type MetaValueDataInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetaValueMap map[int32]*MetaValueInfo `protobuf:"bytes,1,rep,name=metaValueMap,proto3" json:"metaValueMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 元数值基本结构，数值枚举：元数值结构
}

func (x *MetaValueDataInfo) Reset() {
	*x = MetaValueDataInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaValueDataInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaValueDataInfo) ProtoMessage() {}

func (x *MetaValueDataInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaValueDataInfo.ProtoReflect.Descriptor instead.
func (*MetaValueDataInfo) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{57}
}

func (x *MetaValueDataInfo) GetMetaValueMap() map[int32]*MetaValueInfo {
	if x != nil {
		return x.MetaValueMap
	}
	return nil
}

type PresitgeItemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrestigeType       int32           `protobuf:"varint,1,opt,name=prestigeType,proto3" json:"prestigeType,omitempty"`
	Level              int32           `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	Exp                int32           `protobuf:"varint,3,opt,name=exp,proto3" json:"exp,omitempty"`
	StartTimestamp     int32           `protobuf:"varint,4,opt,name=startTimestamp,proto3" json:"startTimestamp,omitempty"`
	SourceMap          map[int64]int32 `protobuf:"bytes,5,rep,name=sourceMap,proto3" json:"sourceMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ClaimedLevelReward []int32         `protobuf:"varint,6,rep,packed,name=claimedLevelReward,proto3" json:"claimedLevelReward,omitempty"`
}

func (x *PresitgeItemInfo) Reset() {
	*x = PresitgeItemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PresitgeItemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresitgeItemInfo) ProtoMessage() {}

func (x *PresitgeItemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresitgeItemInfo.ProtoReflect.Descriptor instead.
func (*PresitgeItemInfo) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{58}
}

func (x *PresitgeItemInfo) GetPrestigeType() int32 {
	if x != nil {
		return x.PrestigeType
	}
	return 0
}

func (x *PresitgeItemInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *PresitgeItemInfo) GetExp() int32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *PresitgeItemInfo) GetStartTimestamp() int32 {
	if x != nil {
		return x.StartTimestamp
	}
	return 0
}

func (x *PresitgeItemInfo) GetSourceMap() map[int64]int32 {
	if x != nil {
		return x.SourceMap
	}
	return nil
}

func (x *PresitgeItemInfo) GetClaimedLevelReward() []int32 {
	if x != nil {
		return x.ClaimedLevelReward
	}
	return nil
}

type PresitgeDataInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prestiges      map[int32]*PresitgeItemInfo `protobuf:"bytes,1,rep,name=prestiges,proto3" json:"prestiges,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`           // 声望数据，声望类型 ：声望数据，包括普通声望和限时声望
	ExtraPrestiges map[int32]*PresitgeItemInfo `protobuf:"bytes,2,rep,name=extraPrestiges,proto3" json:"extraPrestiges,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 各种附加声望数据，变装 GUID ：声望数据
}

func (x *PresitgeDataInfo) Reset() {
	*x = PresitgeDataInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PresitgeDataInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresitgeDataInfo) ProtoMessage() {}

func (x *PresitgeDataInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresitgeDataInfo.ProtoReflect.Descriptor instead.
func (*PresitgeDataInfo) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{59}
}

func (x *PresitgeDataInfo) GetPrestiges() map[int32]*PresitgeItemInfo {
	if x != nil {
		return x.Prestiges
	}
	return nil
}

func (x *PresitgeDataInfo) GetExtraPrestiges() map[int32]*PresitgeItemInfo {
	if x != nil {
		return x.ExtraPrestiges
	}
	return nil
}

type RankDataInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GUId      uint64 `protobuf:"varint,1,opt,name=GUId,proto3" json:"GUId,omitempty"`
	UserName  string `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`
	RankValue int64  `protobuf:"varint,3,opt,name=rankValue,proto3" json:"rankValue,omitempty"`
}

func (x *RankDataInfo) Reset() {
	*x = RankDataInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankDataInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankDataInfo) ProtoMessage() {}

func (x *RankDataInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankDataInfo.ProtoReflect.Descriptor instead.
func (*RankDataInfo) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{60}
}

func (x *RankDataInfo) GetGUId() uint64 {
	if x != nil {
		return x.GUId
	}
	return 0
}

func (x *RankDataInfo) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *RankDataInfo) GetRankValue() int64 {
	if x != nil {
		return x.RankValue
	}
	return 0
}

type RankDataH2C struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankData []*RankDataInfo `protobuf:"bytes,1,rep,name=rankData,proto3" json:"rankData,omitempty"`
}

func (x *RankDataH2C) Reset() {
	*x = RankDataH2C{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankDataH2C) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankDataH2C) ProtoMessage() {}

func (x *RankDataH2C) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankDataH2C.ProtoReflect.Descriptor instead.
func (*RankDataH2C) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{61}
}

func (x *RankDataH2C) GetRankData() []*RankDataInfo {
	if x != nil {
		return x.RankData
	}
	return nil
}

type ActivityInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignIn map[int32]*SignData `protobuf:"bytes,1,rep,name=signIn,proto3" json:"signIn,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ActivityInfo) Reset() {
	*x = ActivityInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityInfo) ProtoMessage() {}

func (x *ActivityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityInfo.ProtoReflect.Descriptor instead.
func (*ActivityInfo) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{62}
}

func (x *ActivityInfo) GetSignIn() map[int32]*SignData {
	if x != nil {
		return x.SignIn
	}
	return nil
}

type SignData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignInDay  int32 `protobuf:"varint,1,opt,name=SignInDay,proto3" json:"SignInDay,omitempty"`
	SignTime   int32 `protobuf:"varint,2,opt,name=SignTime,proto3" json:"SignTime,omitempty"`
	MaxSignDay int32 `protobuf:"varint,3,opt,name=MaxSignDay,proto3" json:"MaxSignDay,omitempty"`
}

func (x *SignData) Reset() {
	*x = SignData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignData) ProtoMessage() {}

func (x *SignData) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignData.ProtoReflect.Descriptor instead.
func (*SignData) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{63}
}

func (x *SignData) GetSignInDay() int32 {
	if x != nil {
		return x.SignInDay
	}
	return 0
}

func (x *SignData) GetSignTime() int32 {
	if x != nil {
		return x.SignTime
	}
	return 0
}

func (x *SignData) GetMaxSignDay() int32 {
	if x != nil {
		return x.MaxSignDay
	}
	return 0
}

type Achievement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Process map[int32]int32          `protobuf:"bytes,1,rep,name=process,proto3" json:"process,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Reward  map[int32]*AchieveReward `protobuf:"bytes,2,rep,name=reward,proto3" json:"reward,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Record  map[int32]*AchieveRecord `protobuf:"bytes,3,rep,name=record,proto3" json:"record,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Achievement) Reset() {
	*x = Achievement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Achievement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Achievement) ProtoMessage() {}

func (x *Achievement) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Achievement.ProtoReflect.Descriptor instead.
func (*Achievement) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{64}
}

func (x *Achievement) GetProcess() map[int32]int32 {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *Achievement) GetReward() map[int32]*AchieveReward {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *Achievement) GetRecord() map[int32]*AchieveRecord {
	if x != nil {
		return x.Record
	}
	return nil
}

type AchieveReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChapterId int32   `protobuf:"varint,1,opt,name=chapterId,proto3" json:"chapterId,omitempty"`
	Achieve   []int32 `protobuf:"varint,2,rep,packed,name=achieve,proto3" json:"achieve,omitempty"`
}

func (x *AchieveReward) Reset() {
	*x = AchieveReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AchieveReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AchieveReward) ProtoMessage() {}

func (x *AchieveReward) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AchieveReward.ProtoReflect.Descriptor instead.
func (*AchieveReward) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{65}
}

func (x *AchieveReward) GetChapterId() int32 {
	if x != nil {
		return x.ChapterId
	}
	return 0
}

func (x *AchieveReward) GetAchieve() []int32 {
	if x != nil {
		return x.Achieve
	}
	return nil
}

type AchieveRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position []int32 `protobuf:"varint,1,rep,packed,name=position,proto3" json:"position,omitempty"`
}

func (x *AchieveRecord) Reset() {
	*x = AchieveRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AchieveRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AchieveRecord) ProtoMessage() {}

func (x *AchieveRecord) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AchieveRecord.ProtoReflect.Descriptor instead.
func (*AchieveRecord) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{66}
}

func (x *AchieveRecord) GetPosition() []int32 {
	if x != nil {
		return x.Position
	}
	return nil
}

type GoodsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodsID                int32  `protobuf:"varint,1,opt,name=GoodsID,proto3" json:"GoodsID,omitempty"`
	BoughtTimes            uint64 `protobuf:"varint,2,opt,name=BoughtTimes,proto3" json:"BoughtTimes,omitempty"`
	LastAutoResetTimestamp int32  `protobuf:"varint,3,opt,name=LastAutoResetTimestamp,proto3" json:"LastAutoResetTimestamp,omitempty"`
}

func (x *GoodsData) Reset() {
	*x = GoodsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodsData) ProtoMessage() {}

func (x *GoodsData) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodsData.ProtoReflect.Descriptor instead.
func (*GoodsData) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{67}
}

func (x *GoodsData) GetGoodsID() int32 {
	if x != nil {
		return x.GoodsID
	}
	return 0
}

func (x *GoodsData) GetBoughtTimes() uint64 {
	if x != nil {
		return x.BoughtTimes
	}
	return 0
}

func (x *GoodsData) GetLastAutoResetTimestamp() int32 {
	if x != nil {
		return x.LastAutoResetTimestamp
	}
	return 0
}

type GroupGoodsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID  int32                `protobuf:"varint,1,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	GoodsMap map[int32]*GoodsData `protobuf:"bytes,2,rep,name=GoodsMap,proto3" json:"GoodsMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GroupGoodsData) Reset() {
	*x = GroupGoodsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupGoodsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupGoodsData) ProtoMessage() {}

func (x *GroupGoodsData) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupGoodsData.ProtoReflect.Descriptor instead.
func (*GroupGoodsData) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{68}
}

func (x *GroupGoodsData) GetGroupID() int32 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

func (x *GroupGoodsData) GetGoodsMap() map[int32]*GoodsData {
	if x != nil {
		return x.GoodsMap
	}
	return nil
}

type ShopData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShopID                   int32             `protobuf:"varint,1,opt,name=ShopID,proto3" json:"ShopID,omitempty"`
	Groups                   []*GroupGoodsData `protobuf:"bytes,3,rep,name=Groups,proto3" json:"Groups,omitempty"`
	StartTimestamp           int32             `protobuf:"varint,4,opt,name=StartTimestamp,proto3" json:"StartTimestamp,omitempty"`
	EndTimestamp             int32             `protobuf:"varint,5,opt,name=EndTimestamp,proto3" json:"EndTimestamp,omitempty"`
	BoughtTimes              uint64            `protobuf:"varint,6,opt,name=BoughtTimes,proto3" json:"BoughtTimes,omitempty"`
	LastAutoRefreshTimestamp int32             `protobuf:"varint,7,opt,name=LastAutoRefreshTimestamp,proto3" json:"LastAutoRefreshTimestamp,omitempty"`
	LastAutoResetTimestamp   int32             `protobuf:"varint,8,opt,name=LastAutoResetTimestamp,proto3" json:"LastAutoResetTimestamp,omitempty"`
}

func (x *ShopData) Reset() {
	*x = ShopData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShopData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopData) ProtoMessage() {}

func (x *ShopData) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopData.ProtoReflect.Descriptor instead.
func (*ShopData) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{69}
}

func (x *ShopData) GetShopID() int32 {
	if x != nil {
		return x.ShopID
	}
	return 0
}

func (x *ShopData) GetGroups() []*GroupGoodsData {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *ShopData) GetStartTimestamp() int32 {
	if x != nil {
		return x.StartTimestamp
	}
	return 0
}

func (x *ShopData) GetEndTimestamp() int32 {
	if x != nil {
		return x.EndTimestamp
	}
	return 0
}

func (x *ShopData) GetBoughtTimes() uint64 {
	if x != nil {
		return x.BoughtTimes
	}
	return 0
}

func (x *ShopData) GetLastAutoRefreshTimestamp() int32 {
	if x != nil {
		return x.LastAutoRefreshTimestamp
	}
	return 0
}

func (x *ShopData) GetLastAutoResetTimestamp() int32 {
	if x != nil {
		return x.LastAutoResetTimestamp
	}
	return 0
}

type PlayerShop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShopMap map[int32]*ShopData `protobuf:"bytes,1,rep,name=ShopMap,proto3" json:"ShopMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PlayerShop) Reset() {
	*x = PlayerShop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerShop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerShop) ProtoMessage() {}

func (x *PlayerShop) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerShop.ProtoReflect.Descriptor instead.
func (*PlayerShop) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{70}
}

func (x *PlayerShop) GetShopMap() map[int32]*ShopData {
	if x != nil {
		return x.ShopMap
	}
	return nil
}

type MailPackageItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemID int32  `protobuf:"varint,1,opt,name=itemID,proto3" json:"itemID,omitempty"`
	Count  uint64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *MailPackageItem) Reset() {
	*x = MailPackageItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MailPackageItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MailPackageItem) ProtoMessage() {}

func (x *MailPackageItem) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MailPackageItem.ProtoReflect.Descriptor instead.
func (*MailPackageItem) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{71}
}

func (x *MailPackageItem) GetItemID() int32 {
	if x != nil {
		return x.ItemID
	}
	return 0
}

func (x *MailPackageItem) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type MailData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MailID      int64           `protobuf:"varint,1,opt,name=mailID,proto3" json:"mailID,omitempty"`
	AuthorID    uint64          `protobuf:"varint,2,opt,name=authorID,proto3" json:"authorID,omitempty"`
	AuthorName  string          `protobuf:"bytes,3,opt,name=authorName,proto3" json:"authorName,omitempty"`
	Status      int32           `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	Title       string          `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Time        int64           `protobuf:"varint,6,opt,name=time,proto3" json:"time,omitempty"`
	ExpiredTime int64           `protobuf:"varint,7,opt,name=expiredTime,proto3" json:"expiredTime,omitempty"`
	Content     string          `protobuf:"bytes,8,opt,name=content,proto3" json:"content,omitempty"`
	Package     map[int32]int64 `protobuf:"bytes,9,rep,name=package,proto3" json:"package,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *MailData) Reset() {
	*x = MailData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MailData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MailData) ProtoMessage() {}

func (x *MailData) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MailData.ProtoReflect.Descriptor instead.
func (*MailData) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{72}
}

func (x *MailData) GetMailID() int64 {
	if x != nil {
		return x.MailID
	}
	return 0
}

func (x *MailData) GetAuthorID() uint64 {
	if x != nil {
		return x.AuthorID
	}
	return 0
}

func (x *MailData) GetAuthorName() string {
	if x != nil {
		return x.AuthorName
	}
	return ""
}

func (x *MailData) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *MailData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MailData) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *MailData) GetExpiredTime() int64 {
	if x != nil {
		return x.ExpiredTime
	}
	return 0
}

func (x *MailData) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *MailData) GetPackage() map[int32]int64 {
	if x != nil {
		return x.Package
	}
	return nil
}

type ElfDataInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ElfInfo        map[int32]*ElfInfo       `protobuf:"bytes,1,rep,name=elfInfo,proto3" json:"elfInfo,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ElfEquipInfo   map[uint64]*ElfEquipInfo `protobuf:"bytes,2,rep,name=elfEquipInfo,proto3" json:"elfEquipInfo,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ElfDebrisCount map[int32]int32          `protobuf:"bytes,4,rep,name=elfDebrisCount,proto3" json:"elfDebrisCount,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *ElfDataInfo) Reset() {
	*x = ElfDataInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElfDataInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElfDataInfo) ProtoMessage() {}

func (x *ElfDataInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElfDataInfo.ProtoReflect.Descriptor instead.
func (*ElfDataInfo) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{73}
}

func (x *ElfDataInfo) GetElfInfo() map[int32]*ElfInfo {
	if x != nil {
		return x.ElfInfo
	}
	return nil
}

func (x *ElfDataInfo) GetElfEquipInfo() map[uint64]*ElfEquipInfo {
	if x != nil {
		return x.ElfEquipInfo
	}
	return nil
}

func (x *ElfDataInfo) GetElfDebrisCount() map[int32]int32 {
	if x != nil {
		return x.ElfDebrisCount
	}
	return nil
}

type ElfInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleId      uint64          `protobuf:"varint,1,opt,name=RoleId,proto3" json:"RoleId,omitempty"`
	ClassID     int32           `protobuf:"varint,2,opt,name=classID,proto3" json:"classID,omitempty"`
	Level       int32           `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	Exp         int32           `protobuf:"varint,4,opt,name=exp,proto3" json:"exp,omitempty"`
	TrustLV     int32           `protobuf:"varint,5,opt,name=trustLV,proto3" json:"trustLV,omitempty"` //信赖等级
	TrustExp    int32           `protobuf:"varint,6,opt,name=trustExp,proto3" json:"trustExp,omitempty"`
	StarLv      int32           `protobuf:"varint,7,opt,name=starLv,proto3" json:"starLv,omitempty"`
	EquipGUID   uint64          `protobuf:"varint,8,opt,name=equipGUID,proto3" json:"equipGUID,omitempty"` //礼装
	SkillData   map[int32]int32 `protobuf:"bytes,10,rep,name=skillData,proto3" json:"skillData,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	UnlockVoice []int32         `protobuf:"varint,12,rep,packed,name=unlockVoice,proto3" json:"unlockVoice,omitempty"` //解锁得声音
	UnlockFile  []int32         `protobuf:"varint,13,rep,packed,name=unlockFile,proto3" json:"unlockFile,omitempty"`
}

func (x *ElfInfo) Reset() {
	*x = ElfInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElfInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElfInfo) ProtoMessage() {}

func (x *ElfInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElfInfo.ProtoReflect.Descriptor instead.
func (*ElfInfo) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{74}
}

func (x *ElfInfo) GetRoleId() uint64 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *ElfInfo) GetClassID() int32 {
	if x != nil {
		return x.ClassID
	}
	return 0
}

func (x *ElfInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ElfInfo) GetExp() int32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *ElfInfo) GetTrustLV() int32 {
	if x != nil {
		return x.TrustLV
	}
	return 0
}

func (x *ElfInfo) GetTrustExp() int32 {
	if x != nil {
		return x.TrustExp
	}
	return 0
}

func (x *ElfInfo) GetStarLv() int32 {
	if x != nil {
		return x.StarLv
	}
	return 0
}

func (x *ElfInfo) GetEquipGUID() uint64 {
	if x != nil {
		return x.EquipGUID
	}
	return 0
}

func (x *ElfInfo) GetSkillData() map[int32]int32 {
	if x != nil {
		return x.SkillData
	}
	return nil
}

func (x *ElfInfo) GetUnlockVoice() []int32 {
	if x != nil {
		return x.UnlockVoice
	}
	return nil
}

func (x *ElfInfo) GetUnlockFile() []int32 {
	if x != nil {
		return x.UnlockFile
	}
	return nil
}

type ElfFightInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassID   int32           `protobuf:"varint,1,opt,name=classID,proto3" json:"classID,omitempty"`
	Level     int32           `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	TrustLV   int32           `protobuf:"varint,3,opt,name=trustLV,proto3" json:"trustLV,omitempty"` //信赖等级
	StarLv    int32           `protobuf:"varint,4,opt,name=starLv,proto3" json:"starLv,omitempty"`
	EquipGUID uint64          `protobuf:"varint,8,opt,name=equipGUID,proto3" json:"equipGUID,omitempty"` //礼装
	SkillData map[int32]int32 `protobuf:"bytes,9,rep,name=skillData,proto3" json:"skillData,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *ElfFightInfo) Reset() {
	*x = ElfFightInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElfFightInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElfFightInfo) ProtoMessage() {}

func (x *ElfFightInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElfFightInfo.ProtoReflect.Descriptor instead.
func (*ElfFightInfo) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{75}
}

func (x *ElfFightInfo) GetClassID() int32 {
	if x != nil {
		return x.ClassID
	}
	return 0
}

func (x *ElfFightInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ElfFightInfo) GetTrustLV() int32 {
	if x != nil {
		return x.TrustLV
	}
	return 0
}

func (x *ElfFightInfo) GetStarLv() int32 {
	if x != nil {
		return x.StarLv
	}
	return 0
}

func (x *ElfFightInfo) GetEquipGUID() uint64 {
	if x != nil {
		return x.EquipGUID
	}
	return 0
}

func (x *ElfFightInfo) GetSkillData() map[int32]int32 {
	if x != nil {
		return x.SkillData
	}
	return nil
}

type ElfEquipInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GUID    uint64 `protobuf:"varint,1,opt,name=GUID,proto3" json:"GUID,omitempty"`
	ClassID int32  `protobuf:"varint,2,opt,name=classID,proto3" json:"classID,omitempty"`
	ELFID   int32  `protobuf:"varint,3,opt,name=ELFID,proto3" json:"ELFID,omitempty"`
	IsLock  bool   `protobuf:"varint,4,opt,name=isLock,proto3" json:"isLock,omitempty"`
	Grow    int32  `protobuf:"varint,5,opt,name=grow,proto3" json:"grow,omitempty"`
	GrowExp int32  `protobuf:"varint,6,opt,name=growExp,proto3" json:"growExp,omitempty"`
	Star    int32  `protobuf:"varint,7,opt,name=star,proto3" json:"star,omitempty"`
}

func (x *ElfEquipInfo) Reset() {
	*x = ElfEquipInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElfEquipInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElfEquipInfo) ProtoMessage() {}

func (x *ElfEquipInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElfEquipInfo.ProtoReflect.Descriptor instead.
func (*ElfEquipInfo) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{76}
}

func (x *ElfEquipInfo) GetGUID() uint64 {
	if x != nil {
		return x.GUID
	}
	return 0
}

func (x *ElfEquipInfo) GetClassID() int32 {
	if x != nil {
		return x.ClassID
	}
	return 0
}

func (x *ElfEquipInfo) GetELFID() int32 {
	if x != nil {
		return x.ELFID
	}
	return 0
}

func (x *ElfEquipInfo) GetIsLock() bool {
	if x != nil {
		return x.IsLock
	}
	return false
}

func (x *ElfEquipInfo) GetGrow() int32 {
	if x != nil {
		return x.Grow
	}
	return 0
}

func (x *ElfEquipInfo) GetGrowExp() int32 {
	if x != nil {
		return x.GrowExp
	}
	return 0
}

func (x *ElfEquipInfo) GetStar() int32 {
	if x != nil {
		return x.Star
	}
	return 0
}

// AsyncInteraction 异步事件通用数据
type AsyncInteraction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GUID          uint64           `protobuf:"varint,1,opt,name=GUID,proto3" json:"GUID,omitempty"`                                                                                                    // 唯一 ID
	KeyPoints     map[int32]int32  `protobuf:"bytes,2,rep,name=KeyPoints,proto3" json:"KeyPoints,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 数据的关键点
	Generator     *FightPlayerInfo `protobuf:"bytes,3,opt,name=Generator,proto3" json:"Generator,omitempty"`                                                                                           // 生成者的数据
	GenerateTime  int32            `protobuf:"varint,4,opt,name=GenerateTime,proto3" json:"GenerateTime,omitempty"`                                                                                    // 生成时间
	AcceptTimes   int32            `protobuf:"varint,5,opt,name=AcceptTimes,proto3" json:"AcceptTimes,omitempty"`                                                                                      // 已处理次数
	CompleteTimes int32            `protobuf:"varint,6,opt,name=CompleteTimes,proto3" json:"CompleteTimes,omitempty"`                                                                                  // 已完成次数
}

func (x *AsyncInteraction) Reset() {
	*x = AsyncInteraction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsyncInteraction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsyncInteraction) ProtoMessage() {}

func (x *AsyncInteraction) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsyncInteraction.ProtoReflect.Descriptor instead.
func (*AsyncInteraction) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{77}
}

func (x *AsyncInteraction) GetGUID() uint64 {
	if x != nil {
		return x.GUID
	}
	return 0
}

func (x *AsyncInteraction) GetKeyPoints() map[int32]int32 {
	if x != nil {
		return x.KeyPoints
	}
	return nil
}

func (x *AsyncInteraction) GetGenerator() *FightPlayerInfo {
	if x != nil {
		return x.Generator
	}
	return nil
}

func (x *AsyncInteraction) GetGenerateTime() int32 {
	if x != nil {
		return x.GenerateTime
	}
	return 0
}

func (x *AsyncInteraction) GetAcceptTimes() int32 {
	if x != nil {
		return x.AcceptTimes
	}
	return 0
}

func (x *AsyncInteraction) GetCompleteTimes() int32 {
	if x != nil {
		return x.CompleteTimes
	}
	return 0
}

type AsyncInteractionA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *AsyncInteraction `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"` // A 类数据
}

func (x *AsyncInteractionA) Reset() {
	*x = AsyncInteractionA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsyncInteractionA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsyncInteractionA) ProtoMessage() {}

func (x *AsyncInteractionA) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsyncInteractionA.ProtoReflect.Descriptor instead.
func (*AsyncInteractionA) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{78}
}

func (x *AsyncInteractionA) GetData() *AsyncInteraction {
	if x != nil {
		return x.Data
	}
	return nil
}

type AsyncInteractionS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *AsyncInteraction `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"` // S 类数据
}

func (x *AsyncInteractionS) Reset() {
	*x = AsyncInteractionS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsyncInteractionS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsyncInteractionS) ProtoMessage() {}

func (x *AsyncInteractionS) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsyncInteractionS.ProtoReflect.Descriptor instead.
func (*AsyncInteractionS) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{79}
}

func (x *AsyncInteractionS) GetData() *AsyncInteraction {
	if x != nil {
		return x.Data
	}
	return nil
}

type AsyncInteractionX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data         *AsyncInteraction `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`                                                                                                           // X 类数据
	ReviewPoints map[int32]int32   `protobuf:"bytes,2,rep,name=ReviewPoints,proto3" json:"ReviewPoints,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 重现数据
}

func (x *AsyncInteractionX) Reset() {
	*x = AsyncInteractionX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsyncInteractionX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsyncInteractionX) ProtoMessage() {}

func (x *AsyncInteractionX) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsyncInteractionX.ProtoReflect.Descriptor instead.
func (*AsyncInteractionX) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{80}
}

func (x *AsyncInteractionX) GetData() *AsyncInteraction {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *AsyncInteractionX) GetReviewPoints() map[int32]int32 {
	if x != nil {
		return x.ReviewPoints
	}
	return nil
}

type AsyncInteractionM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *AsyncInteraction `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"` // M 类数据
}

func (x *AsyncInteractionM) Reset() {
	*x = AsyncInteractionM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsyncInteractionM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsyncInteractionM) ProtoMessage() {}

func (x *AsyncInteractionM) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsyncInteractionM.ProtoReflect.Descriptor instead.
func (*AsyncInteractionM) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{81}
}

func (x *AsyncInteractionM) GetData() *AsyncInteraction {
	if x != nil {
		return x.Data
	}
	return nil
}

type PlayerAsyncInteractionA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataMap               map[uint64]*AsyncInteractionA `protobuf:"bytes,1,rep,name=DataMap,proto3" json:"DataMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 全量数据 map
	GenerateTimeSortSlice []uint64                      `protobuf:"varint,2,rep,packed,name=GenerateTimeSortSlice,proto3" json:"GenerateTimeSortSlice,omitempty"`                                                      // 以生成时间排序的已生成列表
	AcceptTimeSortSlice   []uint64                      `protobuf:"varint,3,rep,packed,name=AcceptTimeSortSlice,proto3" json:"AcceptTimeSortSlice,omitempty"`                                                          // 以接取时间排序的已接取列表
	CompleteTimeSortSlice []uint64                      `protobuf:"varint,4,rep,packed,name=CompleteTimeSortSlice,proto3" json:"CompleteTimeSortSlice,omitempty"`                                                      // 以完成时间排序的已完成列表
}

func (x *PlayerAsyncInteractionA) Reset() {
	*x = PlayerAsyncInteractionA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerAsyncInteractionA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerAsyncInteractionA) ProtoMessage() {}

func (x *PlayerAsyncInteractionA) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerAsyncInteractionA.ProtoReflect.Descriptor instead.
func (*PlayerAsyncInteractionA) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{82}
}

func (x *PlayerAsyncInteractionA) GetDataMap() map[uint64]*AsyncInteractionA {
	if x != nil {
		return x.DataMap
	}
	return nil
}

func (x *PlayerAsyncInteractionA) GetGenerateTimeSortSlice() []uint64 {
	if x != nil {
		return x.GenerateTimeSortSlice
	}
	return nil
}

func (x *PlayerAsyncInteractionA) GetAcceptTimeSortSlice() []uint64 {
	if x != nil {
		return x.AcceptTimeSortSlice
	}
	return nil
}

func (x *PlayerAsyncInteractionA) GetCompleteTimeSortSlice() []uint64 {
	if x != nil {
		return x.CompleteTimeSortSlice
	}
	return nil
}

type PlayerAsyncInteractionS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataMap               map[uint64]*AsyncInteractionS `protobuf:"bytes,1,rep,name=DataMap,proto3" json:"DataMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 全量数据 map
	GenerateTimeSortSlice []uint64                      `protobuf:"varint,2,rep,packed,name=GenerateTimeSortSlice,proto3" json:"GenerateTimeSortSlice,omitempty"`                                                      // 以生成时间排序的已生成列表
	AcceptTimeSortSlice   []uint64                      `protobuf:"varint,3,rep,packed,name=AcceptTimeSortSlice,proto3" json:"AcceptTimeSortSlice,omitempty"`                                                          // 以接取时间排序的已接取列表
	CompleteTimeSortSlice []uint64                      `protobuf:"varint,4,rep,packed,name=CompleteTimeSortSlice,proto3" json:"CompleteTimeSortSlice,omitempty"`                                                      // 以完成时间排序的已完成列表
}

func (x *PlayerAsyncInteractionS) Reset() {
	*x = PlayerAsyncInteractionS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerAsyncInteractionS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerAsyncInteractionS) ProtoMessage() {}

func (x *PlayerAsyncInteractionS) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerAsyncInteractionS.ProtoReflect.Descriptor instead.
func (*PlayerAsyncInteractionS) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{83}
}

func (x *PlayerAsyncInteractionS) GetDataMap() map[uint64]*AsyncInteractionS {
	if x != nil {
		return x.DataMap
	}
	return nil
}

func (x *PlayerAsyncInteractionS) GetGenerateTimeSortSlice() []uint64 {
	if x != nil {
		return x.GenerateTimeSortSlice
	}
	return nil
}

func (x *PlayerAsyncInteractionS) GetAcceptTimeSortSlice() []uint64 {
	if x != nil {
		return x.AcceptTimeSortSlice
	}
	return nil
}

func (x *PlayerAsyncInteractionS) GetCompleteTimeSortSlice() []uint64 {
	if x != nil {
		return x.CompleteTimeSortSlice
	}
	return nil
}

type PlayerAsyncInteractionX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataMap               map[uint64]*AsyncInteractionX `protobuf:"bytes,1,rep,name=DataMap,proto3" json:"DataMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 全量数据 map
	GenerateTimeSortSlice []uint64                      `protobuf:"varint,2,rep,packed,name=GenerateTimeSortSlice,proto3" json:"GenerateTimeSortSlice,omitempty"`                                                      // 以生成时间排序的已生成列表
	AcceptTimeSortSlice   []uint64                      `protobuf:"varint,3,rep,packed,name=AcceptTimeSortSlice,proto3" json:"AcceptTimeSortSlice,omitempty"`                                                          // 以接取时间排序的已接取列表
	CompleteTimeSortSlice []uint64                      `protobuf:"varint,4,rep,packed,name=CompleteTimeSortSlice,proto3" json:"CompleteTimeSortSlice,omitempty"`                                                      // 以完成时间排序的已完成列表
}

func (x *PlayerAsyncInteractionX) Reset() {
	*x = PlayerAsyncInteractionX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerAsyncInteractionX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerAsyncInteractionX) ProtoMessage() {}

func (x *PlayerAsyncInteractionX) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerAsyncInteractionX.ProtoReflect.Descriptor instead.
func (*PlayerAsyncInteractionX) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{84}
}

func (x *PlayerAsyncInteractionX) GetDataMap() map[uint64]*AsyncInteractionX {
	if x != nil {
		return x.DataMap
	}
	return nil
}

func (x *PlayerAsyncInteractionX) GetGenerateTimeSortSlice() []uint64 {
	if x != nil {
		return x.GenerateTimeSortSlice
	}
	return nil
}

func (x *PlayerAsyncInteractionX) GetAcceptTimeSortSlice() []uint64 {
	if x != nil {
		return x.AcceptTimeSortSlice
	}
	return nil
}

func (x *PlayerAsyncInteractionX) GetCompleteTimeSortSlice() []uint64 {
	if x != nil {
		return x.CompleteTimeSortSlice
	}
	return nil
}

type PlayerAsyncInteractionM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataMap               map[uint64]*AsyncInteractionM `protobuf:"bytes,1,rep,name=DataMap,proto3" json:"DataMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 全量数据 map
	GenerateTimeSortSlice []uint64                      `protobuf:"varint,2,rep,packed,name=GenerateTimeSortSlice,proto3" json:"GenerateTimeSortSlice,omitempty"`                                                      // 以生成时间排序的已生成列表
	AcceptTimeSortSlice   []uint64                      `protobuf:"varint,3,rep,packed,name=AcceptTimeSortSlice,proto3" json:"AcceptTimeSortSlice,omitempty"`                                                          // 以接取时间排序的已接取列表
	CompleteTimeSortSlice []uint64                      `protobuf:"varint,4,rep,packed,name=CompleteTimeSortSlice,proto3" json:"CompleteTimeSortSlice,omitempty"`                                                      // 以完成时间排序的已完成列表
}

func (x *PlayerAsyncInteractionM) Reset() {
	*x = PlayerAsyncInteractionM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerAsyncInteractionM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerAsyncInteractionM) ProtoMessage() {}

func (x *PlayerAsyncInteractionM) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerAsyncInteractionM.ProtoReflect.Descriptor instead.
func (*PlayerAsyncInteractionM) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{85}
}

func (x *PlayerAsyncInteractionM) GetDataMap() map[uint64]*AsyncInteractionM {
	if x != nil {
		return x.DataMap
	}
	return nil
}

func (x *PlayerAsyncInteractionM) GetGenerateTimeSortSlice() []uint64 {
	if x != nil {
		return x.GenerateTimeSortSlice
	}
	return nil
}

func (x *PlayerAsyncInteractionM) GetAcceptTimeSortSlice() []uint64 {
	if x != nil {
		return x.AcceptTimeSortSlice
	}
	return nil
}

func (x *PlayerAsyncInteractionM) GetCompleteTimeSortSlice() []uint64 {
	if x != nil {
		return x.CompleteTimeSortSlice
	}
	return nil
}

type PlayerAsyncInteraction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DoingAsyncInteraction uint64                   `protobuf:"varint,1,opt,name=DoingAsyncInteraction,proto3" json:"DoingAsyncInteraction,omitempty"`
	PAIA                  *PlayerAsyncInteractionA `protobuf:"bytes,2,opt,name=PAIA,proto3" json:"PAIA,omitempty"`
	PAIS                  *PlayerAsyncInteractionS `protobuf:"bytes,3,opt,name=PAIS,proto3" json:"PAIS,omitempty"`
	PAIX                  *PlayerAsyncInteractionX `protobuf:"bytes,4,opt,name=PAIX,proto3" json:"PAIX,omitempty"`
	PAIM                  *PlayerAsyncInteractionM `protobuf:"bytes,5,opt,name=PAIM,proto3" json:"PAIM,omitempty"`
}

func (x *PlayerAsyncInteraction) Reset() {
	*x = PlayerAsyncInteraction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerAsyncInteraction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerAsyncInteraction) ProtoMessage() {}

func (x *PlayerAsyncInteraction) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerAsyncInteraction.ProtoReflect.Descriptor instead.
func (*PlayerAsyncInteraction) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{86}
}

func (x *PlayerAsyncInteraction) GetDoingAsyncInteraction() uint64 {
	if x != nil {
		return x.DoingAsyncInteraction
	}
	return 0
}

func (x *PlayerAsyncInteraction) GetPAIA() *PlayerAsyncInteractionA {
	if x != nil {
		return x.PAIA
	}
	return nil
}

func (x *PlayerAsyncInteraction) GetPAIS() *PlayerAsyncInteractionS {
	if x != nil {
		return x.PAIS
	}
	return nil
}

func (x *PlayerAsyncInteraction) GetPAIX() *PlayerAsyncInteractionX {
	if x != nil {
		return x.PAIX
	}
	return nil
}

func (x *PlayerAsyncInteraction) GetPAIM() *PlayerAsyncInteractionM {
	if x != nil {
		return x.PAIM
	}
	return nil
}

type RewardItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item map[int32]int64 `protobuf:"bytes,1,rep,name=item,proto3" json:"item,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *RewardItem) Reset() {
	*x = RewardItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardItem) ProtoMessage() {}

func (x *RewardItem) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardItem.ProtoReflect.Descriptor instead.
func (*RewardItem) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{87}
}

func (x *RewardItem) GetItem() map[int32]int64 {
	if x != nil {
		return x.Item
	}
	return nil
}

type NoticeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoticeID      int32  `protobuf:"varint,1,opt,name=noticeID,proto3" json:"noticeID,omitempty"`
	Methods       int32  `protobuf:"varint,2,opt,name=methods,proto3" json:"methods,omitempty"`
	Target        uint64 `protobuf:"varint,3,opt,name=target,proto3" json:"target,omitempty"`
	ShowType      int32  `protobuf:"varint,4,opt,name=showType,proto3" json:"showType,omitempty"`
	BeginTime     int32  `protobuf:"varint,5,opt,name=beginTime,proto3" json:"beginTime,omitempty"`
	EndTime       int32  `protobuf:"varint,6,opt,name=endTime,proto3" json:"endTime,omitempty"`
	ServerLoopDif int32  `protobuf:"varint,7,opt,name=serverLoopDif,proto3" json:"serverLoopDif,omitempty"`
	Title         string `protobuf:"bytes,8,opt,name=title,proto3" json:"title,omitempty"`
	Content       string `protobuf:"bytes,9,opt,name=content,proto3" json:"content,omitempty"`
	TimerId       uint64 `protobuf:"varint,10,opt,name=timerId,proto3" json:"timerId,omitempty"`
	Weight        int32  `protobuf:"varint,11,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *NoticeData) Reset() {
	*x = NoticeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoticeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoticeData) ProtoMessage() {}

func (x *NoticeData) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoticeData.ProtoReflect.Descriptor instead.
func (*NoticeData) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{88}
}

func (x *NoticeData) GetNoticeID() int32 {
	if x != nil {
		return x.NoticeID
	}
	return 0
}

func (x *NoticeData) GetMethods() int32 {
	if x != nil {
		return x.Methods
	}
	return 0
}

func (x *NoticeData) GetTarget() uint64 {
	if x != nil {
		return x.Target
	}
	return 0
}

func (x *NoticeData) GetShowType() int32 {
	if x != nil {
		return x.ShowType
	}
	return 0
}

func (x *NoticeData) GetBeginTime() int32 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *NoticeData) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *NoticeData) GetServerLoopDif() int32 {
	if x != nil {
		return x.ServerLoopDif
	}
	return 0
}

func (x *NoticeData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *NoticeData) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *NoticeData) GetTimerId() uint64 {
	if x != nil {
		return x.TimerId
	}
	return 0
}

func (x *NoticeData) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type FriendData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestMap map[uint64]int64 `protobuf:"bytes,3,rep,name=RequestMap,proto3" json:"RequestMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *FriendData) Reset() {
	*x = FriendData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendData) ProtoMessage() {}

func (x *FriendData) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendData.ProtoReflect.Descriptor instead.
func (*FriendData) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{89}
}

func (x *FriendData) GetRequestMap() map[uint64]int64 {
	if x != nil {
		return x.RequestMap
	}
	return nil
}

type SingleChatData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerID    uint64 `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	Content     string `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	SendTime    int64  `protobuf:"varint,3,opt,name=SendTime,proto3" json:"SendTime,omitempty"`
	FriendCheck bool   `protobuf:"varint,4,opt,name=FriendCheck,proto3" json:"FriendCheck,omitempty"`
}

func (x *SingleChatData) Reset() {
	*x = SingleChatData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleChatData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleChatData) ProtoMessage() {}

func (x *SingleChatData) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleChatData.ProtoReflect.Descriptor instead.
func (*SingleChatData) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{90}
}

func (x *SingleChatData) GetPlayerID() uint64 {
	if x != nil {
		return x.PlayerID
	}
	return 0
}

func (x *SingleChatData) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SingleChatData) GetSendTime() int64 {
	if x != nil {
		return x.SendTime
	}
	return 0
}

func (x *SingleChatData) GetFriendCheck() bool {
	if x != nil {
		return x.FriendCheck
	}
	return false
}

type PlayerBriefData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerID    uint64 `protobuf:"varint,1,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	PlayerLevel int32  `protobuf:"varint,2,opt,name=PlayerLevel,proto3" json:"PlayerLevel,omitempty"`
}

func (x *PlayerBriefData) Reset() {
	*x = PlayerBriefData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerBriefData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerBriefData) ProtoMessage() {}

func (x *PlayerBriefData) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerBriefData.ProtoReflect.Descriptor instead.
func (*PlayerBriefData) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{91}
}

func (x *PlayerBriefData) GetPlayerID() uint64 {
	if x != nil {
		return x.PlayerID
	}
	return 0
}

func (x *PlayerBriefData) GetPlayerLevel() int32 {
	if x != nil {
		return x.PlayerLevel
	}
	return 0
}

type FightWallData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FightWallData) Reset() {
	*x = FightWallData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightWallData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightWallData) ProtoMessage() {}

func (x *FightWallData) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightWallData.ProtoReflect.Descriptor instead.
func (*FightWallData) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{92}
}

type Collect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectID []int32 `protobuf:"varint,1,rep,packed,name=collectID,proto3" json:"collectID,omitempty"`
}

func (x *Collect) Reset() {
	*x = Collect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collect) ProtoMessage() {}

func (x *Collect) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collect.ProtoReflect.Descriptor instead.
func (*Collect) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{93}
}

func (x *Collect) GetCollectID() []int32 {
	if x != nil {
		return x.CollectID
	}
	return nil
}

type Book struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Book       map[int32]*SonBook `protobuf:"bytes,1,rep,name=book,proto3" json:"book,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 《父标签，子标签集合》
	BookReward []int32            `protobuf:"varint,2,rep,packed,name=bookReward,proto3" json:"bookReward,omitempty"`                                                                      // 已领取奖励的集合
}

func (x *Book) Reset() {
	*x = Book{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Book) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Book) ProtoMessage() {}

func (x *Book) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Book.ProtoReflect.Descriptor instead.
func (*Book) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{94}
}

func (x *Book) GetBook() map[int32]*SonBook {
	if x != nil {
		return x.Book
	}
	return nil
}

func (x *Book) GetBookReward() []int32 {
	if x != nil {
		return x.BookReward
	}
	return nil
}

type SonBook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SonBook map[int32]bool `protobuf:"bytes,1,rep,name=sonBook,proto3" json:"sonBook,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *SonBook) Reset() {
	*x = SonBook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SonBook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SonBook) ProtoMessage() {}

func (x *SonBook) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SonBook.ProtoReflect.Descriptor instead.
func (*SonBook) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{95}
}

func (x *SonBook) GetSonBook() map[int32]bool {
	if x != nil {
		return x.SonBook
	}
	return nil
}

type BagItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemID    int32 `protobuf:"varint,1,opt,name=ItemID,proto3" json:"ItemID,omitempty"`
	ItemCount int64 `protobuf:"varint,2,opt,name=ItemCount,proto3" json:"ItemCount,omitempty"`
	IsNew     bool  `protobuf:"varint,3,opt,name=IsNew,proto3" json:"IsNew,omitempty"`
}

func (x *BagItem) Reset() {
	*x = BagItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BagItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BagItem) ProtoMessage() {}

func (x *BagItem) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BagItem.ProtoReflect.Descriptor instead.
func (*BagItem) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{96}
}

func (x *BagItem) GetItemID() int32 {
	if x != nil {
		return x.ItemID
	}
	return 0
}

func (x *BagItem) GetItemCount() int64 {
	if x != nil {
		return x.ItemCount
	}
	return 0
}

func (x *BagItem) GetIsNew() bool {
	if x != nil {
		return x.IsNew
	}
	return false
}

type PrayData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrayGroupMissCountDataMap map[int32]*PrayGroupMissCountData `protobuf:"bytes,1,rep,name=PrayGroupMissCountDataMap,proto3" json:"PrayGroupMissCountDataMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // pray group ID : PrayGroupMissCountData
}

func (x *PrayData) Reset() {
	*x = PrayData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrayData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrayData) ProtoMessage() {}

func (x *PrayData) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrayData.ProtoReflect.Descriptor instead.
func (*PrayData) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{97}
}

func (x *PrayData) GetPrayGroupMissCountDataMap() map[int32]*PrayGroupMissCountData {
	if x != nil {
		return x.PrayGroupMissCountDataMap
	}
	return nil
}

type PrayGroupMissCountData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NormalMissCountMap  map[int32]uint32 `protobuf:"bytes,1,rep,name=NormalMissCountMap,proto3" json:"NormalMissCountMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`   // guarantee number : miss count
	SpecialMissCountMap map[int32]uint32 `protobuf:"bytes,2,rep,name=SpecialMissCountMap,proto3" json:"SpecialMissCountMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // guarantee number : miss count
	PrayCount           int32            `protobuf:"varint,3,opt,name=PrayCount,proto3" json:"PrayCount,omitempty"`
}

func (x *PrayGroupMissCountData) Reset() {
	*x = PrayGroupMissCountData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrayGroupMissCountData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrayGroupMissCountData) ProtoMessage() {}

func (x *PrayGroupMissCountData) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrayGroupMissCountData.ProtoReflect.Descriptor instead.
func (*PrayGroupMissCountData) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{98}
}

func (x *PrayGroupMissCountData) GetNormalMissCountMap() map[int32]uint32 {
	if x != nil {
		return x.NormalMissCountMap
	}
	return nil
}

func (x *PrayGroupMissCountData) GetSpecialMissCountMap() map[int32]uint32 {
	if x != nil {
		return x.SpecialMissCountMap
	}
	return nil
}

func (x *PrayGroupMissCountData) GetPrayCount() int32 {
	if x != nil {
		return x.PrayCount
	}
	return 0
}

type InstanceFight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []int32 `protobuf:"varint,1,rep,packed,name=records,proto3" json:"records,omitempty"`
}

func (x *InstanceFight) Reset() {
	*x = InstanceFight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceFight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceFight) ProtoMessage() {}

func (x *InstanceFight) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceFight.ProtoReflect.Descriptor instead.
func (*InstanceFight) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{99}
}

func (x *InstanceFight) GetRecords() []int32 {
	if x != nil {
		return x.Records
	}
	return nil
}

type AntiAddictionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastLoginTimestamp  int64 `protobuf:"varint,1,opt,name=lastLoginTimestamp,proto3" json:"lastLoginTimestamp,omitempty"`
	DailyOnlineSeconds  int32 `protobuf:"varint,2,opt,name=dailyOnlineSeconds,proto3" json:"dailyOnlineSeconds,omitempty"`
	WeeklyOnlineSeconds int32 `protobuf:"varint,3,opt,name=weeklyOnlineSeconds,proto3" json:"weeklyOnlineSeconds,omitempty"`
}

func (x *AntiAddictionData) Reset() {
	*x = AntiAddictionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AntiAddictionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntiAddictionData) ProtoMessage() {}

func (x *AntiAddictionData) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntiAddictionData.ProtoReflect.Descriptor instead.
func (*AntiAddictionData) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{100}
}

func (x *AntiAddictionData) GetLastLoginTimestamp() int64 {
	if x != nil {
		return x.LastLoginTimestamp
	}
	return 0
}

func (x *AntiAddictionData) GetDailyOnlineSeconds() int32 {
	if x != nil {
		return x.DailyOnlineSeconds
	}
	return 0
}

func (x *AntiAddictionData) GetWeeklyOnlineSeconds() int32 {
	if x != nil {
		return x.WeeklyOnlineSeconds
	}
	return 0
}

type AccountSaveData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AntiData *AntiAddictionData `protobuf:"bytes,1,opt,name=antiData,proto3" json:"antiData,omitempty"`
}

func (x *AccountSaveData) Reset() {
	*x = AccountSaveData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountSaveData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountSaveData) ProtoMessage() {}

func (x *AccountSaveData) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountSaveData.ProtoReflect.Descriptor instead.
func (*AccountSaveData) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{101}
}

func (x *AccountSaveData) GetAntiData() *AntiAddictionData {
	if x != nil {
		return x.AntiData
	}
	return nil
}

type PlayerGuideData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []int32 `protobuf:"varint,1,rep,packed,name=data,proto3" json:"data,omitempty"`
}

func (x *PlayerGuideData) Reset() {
	*x = PlayerGuideData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cargo_def_player_data_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerGuideData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerGuideData) ProtoMessage() {}

func (x *PlayerGuideData) ProtoReflect() protoreflect.Message {
	mi := &file_cargo_def_player_data_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerGuideData.ProtoReflect.Descriptor instead.
func (*PlayerGuideData) Descriptor() ([]byte, []int) {
	return file_cargo_def_player_data_proto_rawDescGZIP(), []int{102}
}

func (x *PlayerGuideData) GetData() []int32 {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_cargo_def_player_data_proto protoreflect.FileDescriptor

var file_cargo_def_player_data_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2f, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x63,
	0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x22, 0xea, 0x01, 0x0a, 0x08, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x47, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x47, 0x55, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x76, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x76, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x73, 0x4d, 0x65,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f,
	0x5f, 0x64, 0x65, 0x66, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x74,
	0x74, 0x72, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x61, 0x74,
	0x74, 0x72, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x1a, 0x3c, 0x0a, 0x0e, 0x41, 0x74, 0x74, 0x72, 0x73,
	0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa4, 0x02, 0x0a, 0x0b, 0x42, 0x61, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66,
	0x2e, 0x42, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x4c,
	0x0a, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66,
	0x2e, 0x42, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x1a, 0x4d, 0x0a, 0x0a,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x61,
	0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd7, 0x01, 0x0a,
	0x0e, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x46, 0x0a, 0x09, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x42, 0x61, 0x67, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x57,
	0x65, 0x61, 0x70, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x57, 0x65,
	0x61, 0x70, 0x6f, 0x6e, 0x42, 0x61, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x57, 0x65,
	0x61, 0x70, 0x6f, 0x6e, 0x42, 0x61, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x65, 0x61, 0x70, 0x6f,
	0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d,
	0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x1a, 0x57, 0x0a,
	0x0e, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x42, 0x61, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x57, 0x65, 0x61,
	0x70, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe0, 0x01, 0x0a, 0x0e, 0x57, 0x65, 0x61, 0x70, 0x6f,
	0x6e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x47, 0x55, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x47, 0x55, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x47,
	0x55, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x47,
	0x55, 0x49, 0x44, 0x12, 0x46, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x73, 0x4d, 0x65, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64,
	0x65, 0x66, 0x2e, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x1a, 0x3c, 0x0a, 0x0e, 0x41,
	0x74, 0x74, 0x72, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd2, 0x01, 0x0a, 0x0c, 0x43, 0x68,
	0x69, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x47, 0x55,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x47, 0x55, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x78, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x6f, 0x6c, 0x65, 0x47, 0x55, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x72, 0x6f, 0x6c, 0x65, 0x47, 0x55, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x22, 0x5f,
	0x0a, 0x0d, 0x43, 0x68, 0x69, 0x70, 0x46, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x22,
	0xa3, 0x01, 0x0a, 0x0c, 0x43, 0x68, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x3e, 0x0a, 0x07, 0x63, 0x68, 0x69, 0x70, 0x42, 0x61, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x43, 0x68,
	0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x69, 0x70, 0x42,
	0x61, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x68, 0x69, 0x70, 0x42, 0x61, 0x67,
	0x1a, 0x53, 0x0a, 0x0c, 0x43, 0x68, 0x69, 0x70, 0x42, 0x61, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x43, 0x68,
	0x69, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb8, 0x04, 0x0a, 0x0c, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x47, 0x55, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x47, 0x55, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x62, 0x72, 0x65, 0x61, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62, 0x72, 0x65,
	0x61, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x77, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x61, 0x77, 0x61, 0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x05, 0x63, 0x68,
	0x69, 0x70, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x61, 0x72, 0x67,
	0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x43, 0x68, 0x69, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x63,
	0x68, 0x69, 0x70, 0x73, 0x12, 0x3e, 0x0a, 0x07, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x73, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65,
	0x66, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x57,
	0x65, 0x61, 0x70, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x77, 0x65, 0x61,
	0x70, 0x6f, 0x6e, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6c, 0x66, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x65, 0x6c, 0x66, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64,
	0x65, 0x66, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x05, 0x52, 0x10, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x73, 0x1a,
	0x38, 0x0a, 0x0a, 0x43, 0x68, 0x69, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x57, 0x65, 0x61,
	0x70, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xf6, 0x05, 0x0a, 0x11, 0x52, 0x6f, 0x6c, 0x65, 0x46, 0x69, 0x67, 0x68, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x47, 0x55, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x47, 0x55, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x72,
	0x65, 0x61, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62, 0x72, 0x65, 0x61, 0x6b,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x77, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x61, 0x77, 0x61, 0x6b, 0x65, 0x6e, 0x12, 0x49, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72,
	0x73, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x61,
	0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x46, 0x69, 0x67, 0x68,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x73, 0x4d,
	0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x73, 0x4d,
	0x65, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x52,
	0x6f, 0x6c, 0x65, 0x46, 0x69, 0x67, 0x68, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x43, 0x68, 0x69, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x63, 0x68, 0x69,
	0x70, 0x73, 0x12, 0x43, 0x0a, 0x07, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e,
	0x52, 0x6f, 0x6c, 0x65, 0x46, 0x69, 0x67, 0x68, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x03, 0x65, 0x6c, 0x66, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66,
	0x2e, 0x45, 0x6c, 0x66, 0x46, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x65,
	0x6c, 0x66, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x19, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x52,
	0x6f, 0x6c, 0x65, 0x46, 0x69, 0x67, 0x68, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x05, 0x52, 0x10,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x73,
	0x1a, 0x3c, 0x0a, 0x0e, 0x41, 0x74, 0x74, 0x72, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x52,
	0x0a, 0x0a, 0x43, 0x68, 0x69, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x43, 0x68, 0x69, 0x70, 0x46, 0x69,
	0x67, 0x68, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39,
	0x0a, 0x0b, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x38, 0x0a, 0x0c, 0x54, 0x61, 0x73,
	0x6b, 0x4d, 0x61, 0x72, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72,
	0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x49,
	0x44, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x76, 0x61, 0x6c, 0x22, 0x9d, 0x01, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74,
	0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x61,
	0x73, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x44, 0x12, 0x33,
	0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x4d, 0x61, 0x72, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x10, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x46, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x65,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x44, 0x22, 0x63, 0x0a,
	0x10, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x74, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x73, 0x74, 0x61, 0x74, 0x65, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x09, 0x74,
	0x61, 0x73, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x74, 0x65, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x65,
	0x70, 0x73, 0x22, 0x78, 0x0a, 0x0f, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x61,
	0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0c,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x87, 0x04, 0x0a,
	0x0c, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3e, 0x0a,
	0x07, 0x74, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x70, 0x12, 0x50, 0x0a,
	0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x44, 0x0a, 0x09, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x79, 0x63, 0x6c,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x1a, 0x4f, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5c, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65,
	0x64, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x61,
	0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x52, 0x0a, 0x0e, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65,
	0x66, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6b, 0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x79,
	0x63, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x2c, 0x0a, 0x0e, 0x4d, 0x61, 0x69, 0x6c, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x4d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x22, 0xaf, 0x02, 0x0a, 0x0c, 0x4d, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x69, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x6d, 0x61, 0x69, 0x6c, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54,
	0x65, 0x78, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x43, 0x0a, 0x0f, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x4d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x4d, 0x61, 0x69, 0x6c,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x4d, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x6d, 0x61, 0x69, 0x6c,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x4d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x6b, 0x65, 0x65, 0x70, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6b, 0x65, 0x65, 0x70, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x68, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x69,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x69,
	0x6c, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x69, 0x6c, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xcb, 0x01,
	0x0a, 0x0a, 0x50, 0x4d, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x61, 0x69, 0x6c, 0x49, 0x44, 0x69, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x6d, 0x61, 0x69, 0x6c, 0x49, 0x44, 0x69, 0x64, 0x78, 0x12, 0x45, 0x0a, 0x0a, 0x6d, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x50, 0x4d, 0x44, 0x61, 0x74,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x1a, 0x58, 0x0a, 0x0f, 0x4d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65,
	0x66, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5e, 0x0a, 0x0e, 0x42,
	0x42, 0x53, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xd5, 0x01, 0x0a, 0x0e,
	0x42, 0x42, 0x53, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x74, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x74, 0x61, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64,
	0x65, 0x66, 0x2e, 0x42, 0x42, 0x53, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x73, 0x52, 0x65, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x52,
	0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x73, 0x53, 0x74, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x53,
	0x74, 0x61, 0x72, 0x22, 0xb3, 0x01, 0x0a, 0x0b, 0x42, 0x42, 0x53, 0x44, 0x61, 0x74, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x49, 0x0a, 0x0b, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f,
	0x5f, 0x64, 0x65, 0x66, 0x2e, 0x42, 0x42, 0x53, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x59,
	0x0a, 0x10, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e,
	0x42, 0x42, 0x53, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x46, 0x0a, 0x0e, 0x47, 0x61, 0x6d,
	0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x22, 0xd2, 0x01, 0x0a, 0x11, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5e, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x47, 0x61, 0x6d, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x1a, 0x5d, 0x0a, 0x15, 0x47, 0x61, 0x6d, 0x65, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa8, 0x02, 0x0a, 0x0d, 0x47, 0x61, 0x6d, 0x65, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x47,
	0x61, 0x6d, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x47, 0x61,
	0x6d, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x66, 0x0a, 0x14, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x46,
	0x6c, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x46,
	0x6c, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x1a, 0x65, 0x0a, 0x19, 0x47, 0x61,
	0x6d, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f,
	0x5f, 0x64, 0x65, 0x66, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x46, 0x6c,
	0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x87, 0x01, 0x0a, 0x11, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x46,
	0x6c, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x12, 0x67, 0x61, 0x6d, 0x65, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x12, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x46, 0x6c,
	0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x54,
	0x65, 0x78, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x66,
	0x72, 0x6f, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74,
	0x6f, 0x54, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0a, 0x74, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x22, 0x97, 0x03, 0x0a, 0x0a,
	0x4b, 0x56, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x08, 0x66, 0x6c,
	0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63,
	0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x4b, 0x56, 0x44, 0x61, 0x74, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x66, 0x6c, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x08, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x4b, 0x76, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x4b, 0x56, 0x44, 0x61, 0x74, 0x61,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x4b, 0x76, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x4b, 0x76, 0x12, 0x3c, 0x0a, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x4b, 0x56, 0x44, 0x61, 0x74, 0x61,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x1a, 0x50, 0x0a, 0x0d, 0x46, 0x6c,
	0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x4b, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x82, 0x01, 0x0a, 0x08, 0x46, 0x6c, 0x61, 0x67, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x3a, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x4d, 0x61, 0x70, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e,
	0x46, 0x6c, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x4d, 0x61, 0x70, 0x1a, 0x3a,
	0x0a, 0x0c, 0x46, 0x6c, 0x61, 0x67, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x47, 0x0a, 0x09, 0x46, 0x69,
	0x67, 0x68, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x47, 0x75,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x04, 0x52, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x47,
	0x75, 0x69, 0x64, 0x22, 0xab, 0x01, 0x0a, 0x0c, 0x52, 0x6f, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f,
	0x64, 0x65, 0x66, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x72, 0x6f, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x1a, 0x55, 0x0a, 0x0e, 0x52, 0x6f,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xd6, 0x01, 0x0a, 0x16, 0x46, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x44, 0x12, 0x4b, 0x0a, 0x08, 0x74, 0x65,
	0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63,
	0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65,
	0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x54, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x74,
	0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x51, 0x0a, 0x0d, 0x54, 0x65, 0x61, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x61, 0x72, 0x67,
	0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf1, 0x02, 0x0a, 0x0f, 0x44,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64,
	0x65, 0x66, 0x2e, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x08, 0x52, 0x0f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f,
	0x64, 0x65, 0x66, 0x2e, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x38, 0x0a, 0x0a, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc0,
	0x01, 0x0a, 0x11, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4f, 0x0a, 0x0b, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x42,
	0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x61, 0x72, 0x67,
	0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x42,
	0x61, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x42, 0x61, 0x73, 0x65, 0x1a, 0x5a, 0x0a, 0x10, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x42, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x61, 0x72,
	0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x42, 0x61,
	0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xc2, 0x04, 0x0a, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x45, 0x0a, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66,
	0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x6c, 0x0a, 0x17, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x69, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d,
	0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f,
	0x5f, 0x64, 0x65, 0x66, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x69, 0x73, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x17, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x69, 0x73, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x54, 0x0a, 0x0f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x33, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x33, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x33, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x58, 0x0a, 0x0f, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6f, 0x0a, 0x1c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x69, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64,
	0x65, 0x66, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x69,
	0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5e, 0x0a, 0x14, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x33, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x33, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6a, 0x0a, 0x18, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x69, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x69, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x4d, 0x69, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x30, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x54, 0x61, 0x67, 0x4d, 0x69,
	0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x54, 0x61, 0x67, 0x4d, 0x69, 0x73, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x35, 0x0a, 0x0f, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x33, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44,
	0x53, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x22, 0x34, 0x0a, 0x0e, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0xb2, 0x02, 0x0a, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x51, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x4d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x61, 0x72,
	0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x4b, 0x0a, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x4d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x61,
	0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x4d, 0x61, 0x70, 0x1a, 0x3f, 0x0a, 0x11, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x37, 0x0a, 0x09, 0x43, 0x44, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x22, 0x3d, 0x0a,
	0x07, 0x43, 0x64, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x64, 0x6b, 0x65,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x61,
	0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x43, 0x44, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x63, 0x64, 0x6b, 0x65, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xaf, 0x02, 0x0a,
	0x0b, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x67, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x67, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x65,
	0x6f, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x61,
	0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x65, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x09, 0x6d, 0x65, 0x74, 0x65, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a,
	0x09, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x57, 0x65, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x74, 0x79, 0x1a, 0x3c, 0x0a, 0x0e, 0x4d, 0x65, 0x74, 0x65, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3c, 0x0a, 0x0e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc2,
	0x01, 0x0a, 0x07, 0x4d, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x63, 0x65,
	0x6e, 0x65, 0x49, 0x44, 0x12, 0x45, 0x0a, 0x0b, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x61, 0x72, 0x67,
	0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x4d, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x57, 0x65,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b,
	0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x56, 0x0a, 0x10, 0x57,
	0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x57, 0x65, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xdc, 0x02, 0x0a, 0x07, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x61, 0x70,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x61,
	0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x4d, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d,
	0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x73, 0x12, 0x39, 0x0a, 0x07, 0x6e, 0x70, 0x63, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f,
	0x5f, 0x64, 0x65, 0x66, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4e, 0x70, 0x63,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6e, 0x70, 0x63, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x70, 0x63, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x70, 0x63, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x1a, 0x4f, 0x0a, 0x0d, 0x4d, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x4d,
	0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x4f, 0x0a, 0x0c, 0x4e, 0x70, 0x63, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x4e,
	0x50, 0x43, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x5b, 0x0a, 0x11, 0x53, 0x61, 0x66, 0x65, 0x43, 0x69, 0x74, 0x79, 0x5a, 0x6f,
	0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x57, 0x6f, 0x72, 0x6c, 0x64,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22,
	0x28, 0x0a, 0x08, 0x4e, 0x50, 0x43, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4d,
	0x6f, 0x6f, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x4d, 0x6f, 0x6f, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xca, 0x02, 0x0a, 0x0d, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x10, 0x0a,
	0x03, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x69, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72,
	0x69, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x72,
	0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x69, 0x72,
	0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x49, 0x63, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x49, 0x63, 0x6f,
	0x6e, 0x12, 0x45, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x1a, 0x3c, 0x0a, 0x0e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x50, 0x61, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf1, 0x16, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x61, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x76,
	0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x76, 0x69, 0x70, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x65,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x49,
	0x6e, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x67, 0x75, 0x69, 0x64, 0x53, 0x65, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x67, 0x75, 0x69, 0x64, 0x53, 0x65, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c,
	0x0a, 0x09, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x78, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x78, 0x70, 0x12, 0x40, 0x0a, 0x0e,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38,
	0x0a, 0x0b, 0x65, 0x6c, 0x66, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e,
	0x45, 0x6c, 0x66, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x65, 0x6c, 0x66,
	0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x75, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x10, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64,
	0x49, 0x63, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x69, 0x74, 0x79,
	0x57, 0x6f, 0x72, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6c,
	0x61, 0x73, 0x74, 0x43, 0x69, 0x74, 0x79, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x2e,
	0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x69, 0x74, 0x79, 0x57, 0x6f, 0x72,
	0x6c, 0x64, 0x49, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x43, 0x69, 0x74, 0x79, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x26,
	0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x44,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x69, 0x74, 0x79,
	0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x43, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x69, 0x74, 0x79, 0x5a, 0x6f,
	0x6e, 0x65, 0x49, 0x44, 0x12, 0x42, 0x0a, 0x0d, 0x7a, 0x6f, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x61,
	0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x53, 0x61, 0x66, 0x65, 0x43, 0x69, 0x74, 0x79,
	0x5a, 0x6f, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x7a, 0x6f, 0x6e, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x72, 0x61, 0x6d,
	0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c,
	0x64, 0x72, 0x61, 0x6d, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x08,
	0x72, 0x6f, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x52, 0x6f, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x31, 0x0a, 0x07, 0x62, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x18, 0x84, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66,
	0x2e, 0x42, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x62, 0x61,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x85, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f,
	0x5f, 0x64, 0x65, 0x66, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0a, 0x77,
	0x65, 0x61, 0x70, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x86, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x57, 0x65, 0x61,
	0x70, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x77, 0x65, 0x61,
	0x70, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x4d, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x18, 0x87, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x50, 0x4d, 0x44,
	0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d,
	0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x07, 0x62, 0x62, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x88, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x61, 0x72, 0x67,
	0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x42, 0x42, 0x53, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x07, 0x62, 0x62, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x06, 0x6b, 0x76,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x89, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x61,
	0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x4b, 0x56, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x06, 0x6b, 0x76, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x0b, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x06, 0x67, 0x70, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x61, 0x72, 0x67,
	0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x67, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x3d, 0x0a, 0x0a, 0x6d, 0x72, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x8c, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66,
	0x2e, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0a, 0x6d, 0x72, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34,
	0x0a, 0x08, 0x63, 0x68, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x18, 0x8d, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x43, 0x68,
	0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x68, 0x69, 0x70,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63,
	0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x6d, 0x65, 0x74, 0x61,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x0c, 0x70, 0x72, 0x65,
	0x73, 0x69, 0x74, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x50, 0x72, 0x65,
	0x73, 0x69, 0x74, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x70,
	0x72, 0x65, 0x73, 0x69, 0x74, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x09, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x90, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x91, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x07, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x18, 0x92, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f,
	0x64, 0x65, 0x66, 0x2e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x07, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x53, 0x68, 0x6f, 0x70,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x93, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x61,
	0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x68,
	0x6f, 0x70, 0x52, 0x08, 0x53, 0x68, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x14,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x44, 0x61, 0x79, 0x73, 0x18, 0x94, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x79,
	0x73, 0x12, 0x31, 0x0a, 0x13, 0x43, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x18, 0x95, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x13, 0x43, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x44, 0x61, 0x79, 0x73, 0x12, 0x56, 0x0a, 0x14, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x96, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x07,
	0x6d, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x07, 0x63,
	0x64, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x43, 0x64, 0x6b, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x07, 0x63, 0x64, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x0a, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x59, 0x0a, 0x0f, 0x66, 0x69, 0x67, 0x68, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x9a, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63,
	0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x61, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x57, 0x61, 0x6c,
	0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x66, 0x69,
	0x67, 0x68, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x53, 0x0a,
	0x0d, 0x62, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x9b,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65,
	0x66, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x61, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0d, 0x62, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x4d, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x9c, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f,
	0x5f, 0x64, 0x65, 0x66, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x61, 0x76, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x26, 0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x9d, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6b, 0x52, 0x05, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x18, 0x9e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x61, 0x72, 0x67,
	0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x37, 0x0a, 0x09, 0x66, 0x6c,
	0x61, 0x73, 0x68, 0x47, 0x61, 0x6d, 0x65, 0x18, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x46, 0x6c, 0x61, 0x73, 0x68,
	0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x47,
	0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x66, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x61, 0x6d,
	0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f,
	0x64, 0x65, 0x66, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x66, 0x69, 0x67, 0x68,
	0x74, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x39, 0x0a, 0x09, 0x67, 0x75, 0x69, 0x64, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x18, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x61, 0x72, 0x67,
	0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x75, 0x69, 0x64,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x67, 0x75, 0x69, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x1a, 0x42, 0x0a, 0x14, 0x46, 0x69, 0x67, 0x68, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x52, 0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x61,
	0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2b, 0x0a, 0x0d, 0x50, 0x68,
	0x6f, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x49, 0x44, 0x73, 0x22, 0xf2, 0x17, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x69, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x76, 0x69, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x65, 0x6e, 0x65, 0x72,
	0x67, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x63, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x49, 0x6e, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63,
	0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x75, 0x69,
	0x64, 0x53, 0x65, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x75, 0x69,
	0x64, 0x53, 0x65, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x78, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x78, 0x70, 0x12, 0x40, 0x0a, 0x0e, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x0b, 0x65,
	0x6c, 0x66, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x45, 0x6c, 0x66,
	0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x65, 0x6c, 0x66, 0x44, 0x61, 0x74,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x48, 0x65, 0x61, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x10, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64, 0x49, 0x63, 0x6f,
	0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x69, 0x74, 0x79, 0x57, 0x6f, 0x72,
	0x6c, 0x64, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74,
	0x43, 0x69, 0x74, 0x79, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x69, 0x74, 0x79, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x49,
	0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x43, 0x69, 0x74, 0x79, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x6c,
	0x61, 0x73, 0x74, 0x43, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e,
	0x65, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x69,
	0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x49,
	0x44, 0x12, 0x42, 0x0a, 0x0d, 0x7a, 0x6f, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f,
	0x5f, 0x64, 0x65, 0x66, 0x2e, 0x53, 0x61, 0x66, 0x65, 0x43, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x7a, 0x6f, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x72, 0x61, 0x6d, 0x61, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x72, 0x61,
	0x6d, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x75,
	0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61,
	0x75, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x61, 0x72,
	0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a,
	0x07, 0x62, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x42, 0x61, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x62, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x34, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x85, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x74, 0x61,
	0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0a, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x86, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x61,
	0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x3e, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x69, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x87, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x61,
	0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x50, 0x4d, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x69, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x31, 0x0a, 0x07, 0x62, 0x62, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18, 0x88, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66,
	0x2e, 0x42, 0x42, 0x53, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x62, 0x62,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x06, 0x6b, 0x76, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x89, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64,
	0x65, 0x66, 0x2e, 0x4b, 0x56, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x6b,
	0x76, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x61,
	0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x06, 0x67, 0x70, 0x44, 0x61, 0x74, 0x61, 0x18, 0x8b, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x06, 0x67, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x0a, 0x6d, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x44, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6d,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x08, 0x63, 0x68, 0x69,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x18, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x43, 0x68, 0x69, 0x70, 0x44, 0x61, 0x74,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x68, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x43, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f,
	0x64, 0x65, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x6d, 0x65, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x69, 0x74, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x61,
	0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x69, 0x74, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x69, 0x74,
	0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x90, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x61, 0x72,
	0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x3c, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x91, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x61, 0x72, 0x67,
	0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x31, 0x0a, 0x07, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x18, 0x92, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x41,
	0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x68, 0x69,
	0x65, 0x76, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x53, 0x68, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x93, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64,
	0x65, 0x66, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x70, 0x52, 0x08, 0x53,
	0x68, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x18,
	0x94, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x76, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x31, 0x0a, 0x13,
	0x43, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x44,
	0x61, 0x79, 0x73, 0x18, 0x95, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x43, 0x75, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12,
	0x56, 0x0a, 0x14, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x14, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x61, 0x72, 0x67,
	0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6d,
	0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x07, 0x63, 0x64, 0x6b, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f,
	0x5f, 0x64, 0x65, 0x66, 0x2e, 0x43, 0x64, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x63, 0x64,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x0a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x61, 0x72,
	0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x55, 0x0a,
	0x0f, 0x66, 0x69, 0x67, 0x68, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x18, 0x9a, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f,
	0x64, 0x65, 0x66, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x46,
	0x69, 0x67, 0x68, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0f, 0x66, 0x69, 0x67, 0x68, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x4f, 0x0a, 0x0d, 0x62, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x9b, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63,
	0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x62, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x49, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x9c, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x61,
	0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x26, 0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x9d, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6b, 0x52, 0x05, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x18, 0x9e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f,
	0x5f, 0x64, 0x65, 0x66, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x37, 0x0a, 0x09, 0x66, 0x6c, 0x61,
	0x73, 0x68, 0x47, 0x61, 0x6d, 0x65, 0x18, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x47,
	0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x47, 0x61,
	0x6d, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x50, 0x72, 0x61, 0x79, 0x44, 0x61, 0x74, 0x61, 0x18, 0xa0,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65,
	0x66, 0x2e, 0x50, 0x72, 0x61, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x50, 0x72, 0x61, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x74, 0x46, 0x69, 0x67, 0x68,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0xa2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x46, 0x69, 0x67, 0x68, 0x74, 0x52, 0x0d, 0x49, 0x6e, 0x73, 0x74, 0x46, 0x69, 0x67, 0x68,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x09, 0x66, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65,
	0x61, 0x6d, 0x18, 0xa3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x61, 0x72, 0x67,
	0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x66, 0x69,
	0x67, 0x68, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x39, 0x0a, 0x09, 0x67, 0x75, 0x69, 0x64, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x18, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x61,
	0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x75,
	0x69, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x67, 0x75, 0x69, 0x64, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x1a, 0x42, 0x0a, 0x14, 0x46, 0x69, 0x67, 0x68, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x52, 0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x97, 0x04, 0x0a,
	0x0d, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3f,
	0x0a, 0x07, 0x62, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x46, 0x6c, 0x61, 0x73,
	0x68, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x62, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x12,
	0x3c, 0x0a, 0x06, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x46, 0x6c, 0x61, 0x73,
	0x68, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x12, 0x4b, 0x0a,
	0x0b, 0x64, 0x69, 0x66, 0x66, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x46,
	0x6c, 0x61, 0x73, 0x68, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x69, 0x66,
	0x66, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x64,
	0x69, 0x66, 0x66, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x09, 0x71, 0x74,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x47,
	0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x51, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x71, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x1a, 0x3a, 0x0a, 0x0c, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a,
	0x0b, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x44, 0x69, 0x66, 0x66,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x51, 0x74, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x13, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x3d, 0x0a, 0x0b, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc1, 0x04, 0x0a, 0x0f, 0x46,
	0x69, 0x67, 0x68, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x4d, 0x0a, 0x0b, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x61, 0x72, 0x67,
	0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x12, 0x47, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64,
	0x65, 0x66, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x12, 0x47, 0x0a, 0x09,
	0x43, 0x68, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x46, 0x69, 0x67, 0x68,
	0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x69, 0x70,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x43, 0x68, 0x69, 0x70,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x1a, 0x59, 0x0a, 0x10, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x61, 0x72,
	0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x55, 0x0a, 0x0e, 0x52, 0x6f, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e,
	0x52, 0x6f, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x55, 0x0a, 0x0e, 0x43, 0x68, 0x69, 0x70, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x61, 0x72,
	0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x43, 0x68, 0x69, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa2,
	0x01, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x74, 0x65, 0x47, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x74, 0x65, 0x47, 0x55, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0a,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x7f, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x30, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x13, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x22, 0xc2, 0x01, 0x0a, 0x11, 0x4d, 0x65, 0x74, 0x61, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x52, 0x0a, 0x0c, 0x6d, 0x65,
	0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0c, 0x6d, 0x65, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x1a, 0x59,
	0x0a, 0x11, 0x4d, 0x65, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbe, 0x02, 0x0a, 0x10, 0x50, 0x72,
	0x65, 0x73, 0x69, 0x74, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22,
	0x0a, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x74, 0x69, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x74, 0x69, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x48, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65,
	0x66, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x69, 0x74, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x2e, 0x0a, 0x12,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x12, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65,
	0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x1a, 0x3c, 0x0a, 0x0e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf0, 0x02, 0x0a, 0x10, 0x50,
	0x72, 0x65, 0x73, 0x69, 0x74, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x48, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x73, 0x74, 0x69, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x50,
	0x72, 0x65, 0x73, 0x69, 0x74, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x50, 0x72, 0x65, 0x73, 0x74, 0x69, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09,
	0x70, 0x72, 0x65, 0x73, 0x74, 0x69, 0x67, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x0e, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x50, 0x72, 0x65, 0x73, 0x74, 0x69, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x50, 0x72,
	0x65, 0x73, 0x69, 0x74, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x50, 0x72, 0x65, 0x73, 0x74, 0x69, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x50, 0x72, 0x65, 0x73, 0x74, 0x69, 0x67,
	0x65, 0x73, 0x1a, 0x59, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x73, 0x74, 0x69, 0x67, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65,
	0x66, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x69, 0x74, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5e, 0x0a,
	0x13, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x72, 0x65, 0x73, 0x74, 0x69, 0x67, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65,
	0x66, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x69, 0x74, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5c, 0x0a,
	0x0c, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x47, 0x55, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x47, 0x55, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x61, 0x6e, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x42, 0x0a, 0x0b, 0x52,
	0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x48, 0x32, 0x43, 0x12, 0x33, 0x0a, 0x08, 0x72, 0x61,
	0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x9b, 0x01, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x3b, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x1a, 0x4e, 0x0a,
	0x0b, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x64, 0x0a,
	0x08, 0x53, 0x69, 0x67, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x69, 0x67,
	0x6e, 0x49, 0x6e, 0x44, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x69,
	0x67, 0x6e, 0x49, 0x6e, 0x44, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x69, 0x67, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x69, 0x67, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x44, 0x61,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x67, 0x6e,
	0x44, 0x61, 0x79, 0x22, 0xaa, 0x03, 0x0a, 0x0b, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66,
	0x2e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x3a, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x41,
	0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x3a,
	0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x41, 0x63, 0x68, 0x69, 0x65,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x3a, 0x0a, 0x0c, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x53, 0x0a, 0x0b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64,
	0x65, 0x66, 0x2e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x53, 0x0a, 0x0b, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x61,
	0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x47, 0x0a, 0x0d, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x07, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x22, 0x2b, 0x0a, 0x0d, 0x41, 0x63, 0x68,
	0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7f, 0x0a, 0x09, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x44, 0x12, 0x20, 0x0a,
	0x0b, 0x42, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x42, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x36, 0x0a, 0x16, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x16, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xc2, 0x01, 0x0a, 0x0e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x12, 0x43, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4d, 0x61, 0x70,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64,
	0x65, 0x66, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x08, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4d, 0x61, 0x70, 0x1a, 0x51, 0x0a, 0x0d, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x61,
	0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb7, 0x02, 0x0a,
	0x08, 0x53, 0x68, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x68, 0x6f,
	0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x68, 0x6f, 0x70, 0x49,
	0x44, 0x12, 0x31, 0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0c,
	0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x20, 0x0a, 0x0b, 0x42, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x42, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x36,
	0x0a, 0x16, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16,
	0x4c, 0x61, 0x73, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x9b, 0x01, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x68, 0x6f, 0x70, 0x12, 0x3c, 0x0a, 0x07, 0x53, 0x68, 0x6f, 0x70, 0x4d, 0x61, 0x70,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64,
	0x65, 0x66, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x70, 0x2e, 0x53, 0x68,
	0x6f, 0x70, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x53, 0x68, 0x6f, 0x70,
	0x4d, 0x61, 0x70, 0x1a, 0x4f, 0x0a, 0x0c, 0x53, 0x68, 0x6f, 0x70, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66,
	0x2e, 0x53, 0x68, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x3f, 0x0a, 0x0f, 0x4d, 0x61, 0x69, 0x6c, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd4, 0x02, 0x0a, 0x08, 0x4d, 0x61, 0x69, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x69, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x6d, 0x61, 0x69, 0x6c, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65,
	0x66, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x1a, 0x3a, 0x0a, 0x0c, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdb, 0x03, 0x0a,
	0x0b, 0x45, 0x6c, 0x66, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x07,
	0x65, 0x6c, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x45, 0x6c, 0x66, 0x44, 0x61, 0x74,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x6c, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x65, 0x6c, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4c, 0x0a, 0x0c, 0x65,
	0x6c, 0x66, 0x45, 0x71, 0x75, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x45, 0x6c,
	0x66, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x6c, 0x66, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x65, 0x6c, 0x66,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x52, 0x0a, 0x0e, 0x65, 0x6c, 0x66,
	0x44, 0x65, 0x62, 0x72, 0x69, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x45, 0x6c,
	0x66, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x6c, 0x66, 0x44, 0x65, 0x62,
	0x72, 0x69, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x65,
	0x6c, 0x66, 0x44, 0x65, 0x62, 0x72, 0x69, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x4e, 0x0a,
	0x0c, 0x45, 0x6c, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x45, 0x6c, 0x66, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x58, 0x0a,
	0x11, 0x45, 0x6c, 0x66, 0x45, 0x71, 0x75, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e,
	0x45, 0x6c, 0x66, 0x45, 0x71, 0x75, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x45, 0x6c, 0x66, 0x44, 0x65,
	0x62, 0x72, 0x69, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x90, 0x03, 0x0a, 0x07, 0x45,
	0x6c, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x78, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x75, 0x73, 0x74, 0x4c, 0x56, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x74, 0x72, 0x75, 0x73, 0x74, 0x4c, 0x56, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x45, 0x78, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x45, 0x78, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x72, 0x4c, 0x76,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x72, 0x4c, 0x76, 0x12, 0x1c,
	0x0a, 0x09, 0x65, 0x71, 0x75, 0x69, 0x70, 0x47, 0x55, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x65, 0x71, 0x75, 0x69, 0x70, 0x47, 0x55, 0x49, 0x44, 0x12, 0x3f, 0x0a, 0x09,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x45, 0x6c, 0x66, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x09, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a,
	0x0b, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0b, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x0a, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x1a,
	0x3c, 0x0a, 0x0e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x92, 0x02,
	0x0a, 0x0c, 0x45, 0x6c, 0x66, 0x46, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x72, 0x75, 0x73, 0x74, 0x4c, 0x56, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x74, 0x72, 0x75, 0x73, 0x74, 0x4c, 0x56, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x72,
	0x4c, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x72, 0x4c, 0x76,
	0x12, 0x1c, 0x0a, 0x09, 0x65, 0x71, 0x75, 0x69, 0x70, 0x47, 0x55, 0x49, 0x44, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x71, 0x75, 0x69, 0x70, 0x47, 0x55, 0x49, 0x44, 0x12, 0x44,
	0x0a, 0x09, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x45, 0x6c,
	0x66, 0x46, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x1a, 0x3c, 0x0a, 0x0e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xac, 0x01, 0x0a, 0x0c, 0x45, 0x6c, 0x66, 0x45, 0x71, 0x75, 0x69, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x47, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x47, 0x55, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49,
	0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x4c, 0x46, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x45, 0x4c, 0x46, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x6f, 0x63,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x12,
	0x12, 0x0a, 0x04, 0x67, 0x72, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x67,
	0x72, 0x6f, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x77, 0x45, 0x78, 0x70, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x77, 0x45, 0x78, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x74, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x74, 0x61,
	0x72, 0x22, 0xd4, 0x02, 0x0a, 0x10, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x47, 0x55, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x47, 0x55, 0x49, 0x44, 0x12, 0x48, 0x0a, 0x09, 0x4b, 0x65,
	0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x4b, 0x65, 0x79, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f,
	0x64, 0x65, 0x66, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x22,
	0x0a, 0x0c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x4b, 0x65,
	0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x44, 0x0a, 0x11, 0x41, 0x73, 0x79, 0x6e,
	0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x12, 0x2f, 0x0a,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x61,
	0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x44,
	0x0a, 0x11, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x12, 0x2f, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x41, 0x73,
	0x79, 0x6e, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x22, 0xd9, 0x01, 0x0a, 0x11, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x12, 0x2f, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f,
	0x5f, 0x64, 0x65, 0x66, 0x2e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x52, 0x0a, 0x0c, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x41, 0x73,
	0x79, 0x6e, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x2e,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x1a,
	0x3f, 0x0a, 0x11, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x44, 0x0a, 0x11, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x12, 0x2f, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e,
	0x41, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0xdc, 0x02, 0x0a, 0x17, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x12, 0x49, 0x0a, 0x07, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x12, 0x34, 0x0a,
	0x15, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6f, 0x72,
	0x74, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x15, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x53, 0x6c,
	0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x6f, 0x72, 0x74, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x13, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6f, 0x72, 0x74,
	0x53, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x1a, 0x58, 0x0a, 0x0c, 0x44,
	0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63,
	0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdc, 0x02, 0x0a, 0x17, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x41, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x12, 0x49, 0x0a, 0x07, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x12, 0x34, 0x0a, 0x15,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6f, 0x72, 0x74,
	0x53, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x15, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x53, 0x6c, 0x69,
	0x63, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x6f, 0x72, 0x74, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x13, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x53,
	0x6c, 0x69, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x6f, 0x72, 0x74, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x1a, 0x58, 0x0a, 0x0c, 0x44, 0x61,
	0x74, 0x61, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x61,
	0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xdc, 0x02, 0x0a, 0x17, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41,
	0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x58,
	0x12, 0x49, 0x0a, 0x07, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x58, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x12, 0x34, 0x0a, 0x15, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x53,
	0x6c, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x15, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x53, 0x6c, 0x69, 0x63,
	0x65, 0x12, 0x30, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x6f, 0x72, 0x74, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x13,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x53, 0x6c,
	0x69, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x6f, 0x72, 0x74, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x1a, 0x58, 0x0a, 0x0c, 0x44, 0x61, 0x74,
	0x61, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x61, 0x72,
	0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xdc, 0x02, 0x0a, 0x17, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x73,
	0x79, 0x6e, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x12,
	0x49, 0x0a, 0x07, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x12, 0x34, 0x0a, 0x15, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x53, 0x6c,
	0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x15, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x53, 0x6c, 0x69, 0x63, 0x65,
	0x12, 0x30, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6f,
	0x72, 0x74, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x13, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x53, 0x6c, 0x69,
	0x63, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x6f, 0x72, 0x74, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x1a, 0x58, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x61, 0x72, 0x67,
	0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xae, 0x02, 0x0a, 0x16, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x73, 0x79,
	0x6e, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a,
	0x15, 0x44, 0x6f, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x44, 0x6f,
	0x69, 0x6e, 0x67, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x04, 0x50, 0x41, 0x49, 0x41, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x52, 0x04, 0x50, 0x41, 0x49, 0x41, 0x12, 0x36, 0x0a, 0x04, 0x50,
	0x41, 0x49, 0x53, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x61, 0x72, 0x67,
	0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x73, 0x79, 0x6e,
	0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x52, 0x04, 0x50,
	0x41, 0x49, 0x53, 0x12, 0x36, 0x0a, 0x04, 0x50, 0x41, 0x49, 0x58, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x58, 0x52, 0x04, 0x50, 0x41, 0x49, 0x58, 0x12, 0x36, 0x0a, 0x04, 0x50,
	0x41, 0x49, 0x4d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x61, 0x72, 0x67,
	0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x73, 0x79, 0x6e,
	0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x52, 0x04, 0x50,
	0x41, 0x49, 0x4d, 0x22, 0x7a, 0x0a, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x33, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x1a, 0x37, 0x0a, 0x09, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xb6, 0x02, 0x0a, 0x0a, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a,
	0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x68, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x73, 0x68, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x65, 0x67, 0x69,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x6f, 0x70, 0x44, 0x69,
	0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c,
	0x6f, 0x6f, 0x70, 0x44, 0x69, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x92, 0x01, 0x0a, 0x0a, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x0a, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x61,
	0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x1a, 0x3d,
	0x0a, 0x0f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x84, 0x01,
	0x0a, 0x0e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x22, 0x4f, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x72,
	0x69, 0x65, 0x66, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x0f, 0x0a, 0x0d, 0x46, 0x69, 0x67, 0x68, 0x74, 0x57, 0x61,
	0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x27, 0x0a, 0x07, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x44, 0x22,
	0xa2, 0x01, 0x0a, 0x04, 0x42, 0x6f, 0x6f, 0x6b, 0x12, 0x2d, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6b,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64,
	0x65, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6b, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x6f, 0x6f,
	0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x1a, 0x4b, 0x0a, 0x09, 0x42, 0x6f, 0x6f, 0x6b, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65,
	0x66, 0x2e, 0x53, 0x6f, 0x6e, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x80, 0x01, 0x0a, 0x07, 0x53, 0x6f, 0x6e, 0x42, 0x6f, 0x6f, 0x6b,
	0x12, 0x39, 0x0a, 0x07, 0x73, 0x6f, 0x6e, 0x42, 0x6f, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x53, 0x6f,
	0x6e, 0x42, 0x6f, 0x6f, 0x6b, 0x2e, 0x53, 0x6f, 0x6e, 0x42, 0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x73, 0x6f, 0x6e, 0x42, 0x6f, 0x6f, 0x6b, 0x1a, 0x3a, 0x0a, 0x0c, 0x53,
	0x6f, 0x6e, 0x42, 0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x55, 0x0a, 0x07, 0x42, 0x61, 0x67, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x74,
	0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x49,
	0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x4e, 0x65,
	0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x49, 0x73, 0x4e, 0x65, 0x77, 0x22, 0xed,
	0x01, 0x0a, 0x08, 0x50, 0x72, 0x61, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x70, 0x0a, 0x19, 0x50,
	0x72, 0x61, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x69, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x50, 0x72, 0x61, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x61, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x69, 0x73,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x19, 0x50, 0x72, 0x61, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x69, 0x73,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x1a, 0x6f, 0x0a,
	0x1e, 0x50, 0x72, 0x61, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x69, 0x73, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x50, 0x72, 0x61,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x69, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9e,
	0x03, 0x0a, 0x16, 0x50, 0x72, 0x61, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x69, 0x73, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x69, 0x0a, 0x12, 0x4e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x4d, 0x69, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65,
	0x66, 0x2e, 0x50, 0x72, 0x61, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x69, 0x73, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4d,
	0x69, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x12, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4d, 0x69, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x4d, 0x61, 0x70, 0x12, 0x6c, 0x0a, 0x13, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x4d,
	0x69, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x2e, 0x50, 0x72,
	0x61, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x69, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x4d, 0x69, 0x73, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x4d, 0x69, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d,
	0x61, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x50, 0x72, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x1a, 0x45, 0x0a, 0x17, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4d, 0x69, 0x73, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x46, 0x0a, 0x18, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x4d, 0x69, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x29, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x11, 0x41,
	0x6e, 0x74, 0x69, 0x41, 0x64, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6c, 0x61,
	0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x2e, 0x0a, 0x12, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x64, 0x61,
	0x69, 0x6c, 0x79, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x30, 0x0a, 0x13, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x77,
	0x65, 0x65, 0x6b, 0x6c, 0x79, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x22, 0x4b, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x61, 0x76,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x08, 0x61, 0x6e, 0x74, 0x69, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f,
	0x64, 0x65, 0x66, 0x2e, 0x41, 0x6e, 0x74, 0x69, 0x41, 0x64, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x61, 0x6e, 0x74, 0x69, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x25, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x75, 0x69, 0x64, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x2a, 0x30, 0x0a, 0x10, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x45, 0x41, 0x44, 0x10, 0x01, 0x12, 0x08,
	0x0a, 0x04, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x5f,
	0x67, 0x65, 0x6e, 0x2f, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x3b, 0x63, 0x61,
	0x72, 0x67, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cargo_def_player_data_proto_rawDescOnce sync.Once
	file_cargo_def_player_data_proto_rawDescData = file_cargo_def_player_data_proto_rawDesc
)

func file_cargo_def_player_data_proto_rawDescGZIP() []byte {
	file_cargo_def_player_data_proto_rawDescOnce.Do(func() {
		file_cargo_def_player_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_cargo_def_player_data_proto_rawDescData)
	})
	return file_cargo_def_player_data_proto_rawDescData
}

var file_cargo_def_player_data_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_cargo_def_player_data_proto_msgTypes = make([]protoimpl.MessageInfo, 185)
var file_cargo_def_player_data_proto_goTypes = []interface{}{
	(MAIL_STATUS_TYPE)(0),            // 0: cargo_def.MAIL_STATUS_TYPE
	(*ItemInfo)(nil),                 // 1: cargo_def.ItemInfo
	(*BagDataInfo)(nil),              // 2: cargo_def.BagDataInfo
	(*WeaponDataInfo)(nil),           // 3: cargo_def.WeaponDataInfo
	(*WeaponItemInfo)(nil),           // 4: cargo_def.WeaponItemInfo
	(*ChipItemInfo)(nil),             // 5: cargo_def.ChipItemInfo
	(*ChipFightInfo)(nil),            // 6: cargo_def.ChipFightInfo
	(*ChipDataInfo)(nil),             // 7: cargo_def.ChipDataInfo
	(*RoleItemInfo)(nil),             // 8: cargo_def.RoleItemInfo
	(*RoleFightItemInfo)(nil),        // 9: cargo_def.RoleFightItemInfo
	(*TaskMarkSave)(nil),             // 10: cargo_def.TaskMarkSave
	(*TaskData)(nil),                 // 11: cargo_def.TaskData
	(*RecordDataInfo)(nil),           // 12: cargo_def.RecordDataInfo
	(*TaskStepData)(nil),             // 13: cargo_def.TaskStepData
	(*TaskStateHistory)(nil),         // 14: cargo_def.TaskStateHistory
	(*TaskDeliverData)(nil),          // 15: cargo_def.TaskDeliverData
	(*TaskDataInfo)(nil),             // 16: cargo_def.TaskDataInfo
	(*TaskCycle)(nil),                // 17: cargo_def.TaskCycle
	(*MailAttachMent)(nil),           // 18: cargo_def.MailAttachMent
	(*MailDataInfo)(nil),             // 19: cargo_def.MailDataInfo
	(*ReportMailData)(nil),           // 20: cargo_def.ReportMailData
	(*PMDataInfo)(nil),               // 21: cargo_def.PMDataInfo
	(*BBSCommentData)(nil),           // 22: cargo_def.BBSCommentData
	(*BBSArticleData)(nil),           // 23: cargo_def.BBSArticleData
	(*BBSDataInfo)(nil),              // 24: cargo_def.BBSDataInfo
	(*GamePhoneOrder)(nil),           // 25: cargo_def.GamePhoneOrder
	(*GamePhoneDataInfo)(nil),        // 26: cargo_def.GamePhoneDataInfo
	(*GamePhoneData)(nil),            // 27: cargo_def.GamePhoneData
	(*GamePhoneFlowData)(nil),        // 28: cargo_def.GamePhoneFlowData
	(*KVDataInfo)(nil),               // 29: cargo_def.KVDataInfo
	(*FlagData)(nil),                 // 30: cargo_def.FlagData
	(*FightTeam)(nil),                // 31: cargo_def.FightTeam
	(*RoleDataInfo)(nil),             // 32: cargo_def.RoleDataInfo
	(*FightTeamGroupDataInfo)(nil),   // 33: cargo_def.FightTeamGroupDataInfo
	(*DungeonBaseInfo)(nil),          // 34: cargo_def.DungeonBaseInfo
	(*DungeonRecordInfo)(nil),        // 35: cargo_def.DungeonRecordInfo
	(*RewardData)(nil),               // 36: cargo_def.RewardData
	(*RewardGroupMissCountData)(nil), // 37: cargo_def.RewardGroupMissCountData
	(*RewardType3Data)(nil),          // 38: cargo_def.RewardType3Data
	(*RewardItemInfo)(nil),           // 39: cargo_def.RewardItemInfo
	(*EventTriggerData)(nil),         // 40: cargo_def.EventTriggerData
	(*CDKeyInfo)(nil),                // 41: cargo_def.CDKeyInfo
	(*CdkData)(nil),                  // 42: cargo_def.CdkData
	(*WeatherInfo)(nil),              // 43: cargo_def.WeatherInfo
	(*MapData)(nil),                  // 44: cargo_def.MapData
	(*MapInfo)(nil),                  // 45: cargo_def.MapInfo
	(*SafeCityZoneState)(nil),        // 46: cargo_def.SafeCityZoneState
	(*NPCValue)(nil),                 // 47: cargo_def.NPCValue
	(*PlayerMsgInfo)(nil),            // 48: cargo_def.PlayerMsgInfo
	(*PlayerSaveData)(nil),           // 49: cargo_def.PlayerSaveData
	(*PhotoDataInfo)(nil),            // 50: cargo_def.PhotoDataInfo
	(*PlayerData)(nil),               // 51: cargo_def.PlayerData
	(*FlashGameData)(nil),            // 52: cargo_def.FlashGameData
	(*PlayerStorageData)(nil),        // 53: cargo_def.PlayerStorageData
	(*ScenePlayer)(nil),              // 54: cargo_def.ScenePlayer
	(*FightPlayerInfo)(nil),          // 55: cargo_def.FightPlayerInfo
	(*TransPlayerData)(nil),          // 56: cargo_def.TransPlayerData
	(*MetaValueInfo)(nil),            // 57: cargo_def.MetaValueInfo
	(*MetaValueDataInfo)(nil),        // 58: cargo_def.MetaValueDataInfo
	(*PresitgeItemInfo)(nil),         // 59: cargo_def.PresitgeItemInfo
	(*PresitgeDataInfo)(nil),         // 60: cargo_def.PresitgeDataInfo
	(*RankDataInfo)(nil),             // 61: cargo_def.RankDataInfo
	(*RankDataH2C)(nil),              // 62: cargo_def.RankDataH2C
	(*ActivityInfo)(nil),             // 63: cargo_def.ActivityInfo
	(*SignData)(nil),                 // 64: cargo_def.SignData
	(*Achievement)(nil),              // 65: cargo_def.Achievement
	(*AchieveReward)(nil),            // 66: cargo_def.AchieveReward
	(*AchieveRecord)(nil),            // 67: cargo_def.AchieveRecord
	(*GoodsData)(nil),                // 68: cargo_def.GoodsData
	(*GroupGoodsData)(nil),           // 69: cargo_def.GroupGoodsData
	(*ShopData)(nil),                 // 70: cargo_def.ShopData
	(*PlayerShop)(nil),               // 71: cargo_def.PlayerShop
	(*MailPackageItem)(nil),          // 72: cargo_def.MailPackageItem
	(*MailData)(nil),                 // 73: cargo_def.MailData
	(*ElfDataInfo)(nil),              // 74: cargo_def.ElfDataInfo
	(*ElfInfo)(nil),                  // 75: cargo_def.ElfInfo
	(*ElfFightInfo)(nil),             // 76: cargo_def.ElfFightInfo
	(*ElfEquipInfo)(nil),             // 77: cargo_def.ElfEquipInfo
	(*AsyncInteraction)(nil),         // 78: cargo_def.AsyncInteraction
	(*AsyncInteractionA)(nil),        // 79: cargo_def.AsyncInteractionA
	(*AsyncInteractionS)(nil),        // 80: cargo_def.AsyncInteractionS
	(*AsyncInteractionX)(nil),        // 81: cargo_def.AsyncInteractionX
	(*AsyncInteractionM)(nil),        // 82: cargo_def.AsyncInteractionM
	(*PlayerAsyncInteractionA)(nil),  // 83: cargo_def.PlayerAsyncInteractionA
	(*PlayerAsyncInteractionS)(nil),  // 84: cargo_def.PlayerAsyncInteractionS
	(*PlayerAsyncInteractionX)(nil),  // 85: cargo_def.PlayerAsyncInteractionX
	(*PlayerAsyncInteractionM)(nil),  // 86: cargo_def.PlayerAsyncInteractionM
	(*PlayerAsyncInteraction)(nil),   // 87: cargo_def.PlayerAsyncInteraction
	(*RewardItem)(nil),               // 88: cargo_def.RewardItem
	(*NoticeData)(nil),               // 89: cargo_def.NoticeData
	(*FriendData)(nil),               // 90: cargo_def.FriendData
	(*SingleChatData)(nil),           // 91: cargo_def.SingleChatData
	(*PlayerBriefData)(nil),          // 92: cargo_def.PlayerBriefData
	(*FightWallData)(nil),            // 93: cargo_def.FightWallData
	(*Collect)(nil),                  // 94: cargo_def.Collect
	(*Book)(nil),                     // 95: cargo_def.Book
	(*SonBook)(nil),                  // 96: cargo_def.SonBook
	(*BagItem)(nil),                  // 97: cargo_def.BagItem
	(*PrayData)(nil),                 // 98: cargo_def.PrayData
	(*PrayGroupMissCountData)(nil),   // 99: cargo_def.PrayGroupMissCountData
	(*InstanceFight)(nil),            // 100: cargo_def.InstanceFight
	(*AntiAddictionData)(nil),        // 101: cargo_def.AntiAddictionData
	(*AccountSaveData)(nil),          // 102: cargo_def.AccountSaveData
	(*PlayerGuideData)(nil),          // 103: cargo_def.PlayerGuideData
	nil,                              // 104: cargo_def.ItemInfo.AttrsMetaEntry
	nil,                              // 105: cargo_def.BagDataInfo.ItemsEntry
	nil,                              // 106: cargo_def.BagDataInfo.ItemsRecordsEntry
	nil,                              // 107: cargo_def.WeaponDataInfo.WeaponBagEntry
	nil,                              // 108: cargo_def.WeaponItemInfo.AttrsMetaEntry
	nil,                              // 109: cargo_def.ChipDataInfo.ChipBagEntry
	nil,                              // 110: cargo_def.RoleItemInfo.ChipsEntry
	nil,                              // 111: cargo_def.RoleItemInfo.WeaponsEntry
	nil,                              // 112: cargo_def.RoleItemInfo.SkillsEntry
	nil,                              // 113: cargo_def.RoleFightItemInfo.AttrsMetaEntry
	nil,                              // 114: cargo_def.RoleFightItemInfo.ChipsEntry
	nil,                              // 115: cargo_def.RoleFightItemInfo.WeaponsEntry
	nil,                              // 116: cargo_def.RoleFightItemInfo.SkillsEntry
	nil,                              // 117: cargo_def.TaskDataInfo.TaskMapEntry
	nil,                              // 118: cargo_def.TaskDataInfo.DeliveredTaskEntry
	nil,                              // 119: cargo_def.TaskDataInfo.CycleTaskEntry
	nil,                              // 120: cargo_def.PMDataInfo.MailRecordEntry
	nil,                              // 121: cargo_def.BBSDataInfo.ArticleDataEntry
	nil,                              // 122: cargo_def.GamePhoneDataInfo.GamePhoneDataMapEntry
	nil,                              // 123: cargo_def.GamePhoneData.GamePhoneFlowDataMapEntry
	nil,                              // 124: cargo_def.KVDataInfo.FlagDataEntry
	nil,                              // 125: cargo_def.KVDataInfo.EventsKvEntry
	nil,                              // 126: cargo_def.KVDataInfo.CounterEntry
	nil,                              // 127: cargo_def.FlagData.FlagMapEntry
	nil,                              // 128: cargo_def.RoleDataInfo.RoleDatasEntry
	nil,                              // 129: cargo_def.FightTeamGroupDataInfo.TeamDataEntry
	nil,                              // 130: cargo_def.DungeonBaseInfo.LimitCountEntry
	nil,                              // 131: cargo_def.DungeonBaseInfo.RolesEntry
	nil,                              // 132: cargo_def.DungeonRecordInfo.DungeonBaseEntry
	nil,                              // 133: cargo_def.RewardData.RewardMetaEntry
	nil,                              // 134: cargo_def.RewardData.RewardGroupMissCountMapEntry
	nil,                              // 135: cargo_def.RewardData.RewardType3DataEntry
	nil,                              // 136: cargo_def.EventTriggerData.EventTypeMapEntry
	nil,                              // 137: cargo_def.EventTriggerData.EventIDMapEntry
	nil,                              // 138: cargo_def.WeatherInfo.MeteoDataEntry
	nil,                              // 139: cargo_def.WeatherInfo.IntensityEntry
	nil,                              // 140: cargo_def.MapData.WeatherInfoEntry
	nil,                              // 141: cargo_def.MapInfo.MapDatasEntry
	nil,                              // 142: cargo_def.MapInfo.NpcDataEntry
	nil,                              // 143: cargo_def.PlayerMsgInfo.ModelParaEntry
	nil,                              // 144: cargo_def.PlayerSaveData.FightWallRecordEntry
	nil,                              // 145: cargo_def.PlayerSaveData.BarrageRecordEntry
	nil,                              // 146: cargo_def.PlayerSaveData.CollectInfoEntry
	nil,                              // 147: cargo_def.PlayerData.FightWallRecordEntry
	nil,                              // 148: cargo_def.PlayerData.BarrageRecordEntry
	nil,                              // 149: cargo_def.PlayerData.CollectInfoEntry
	nil,                              // 150: cargo_def.FlashGameData.BarrageEntry
	nil,                              // 151: cargo_def.FlashGameData.PuzzleEntry
	nil,                              // 152: cargo_def.FlashGameData.DiffCheckerEntry
	nil,                              // 153: cargo_def.FlashGameData.QteRecordEntry
	nil,                              // 154: cargo_def.FightPlayerInfo.WeaponDatasEntry
	nil,                              // 155: cargo_def.FightPlayerInfo.RoleDatasEntry
	nil,                              // 156: cargo_def.FightPlayerInfo.ChipDatasEntry
	nil,                              // 157: cargo_def.MetaValueDataInfo.MetaValueMapEntry
	nil,                              // 158: cargo_def.PresitgeItemInfo.SourceMapEntry
	nil,                              // 159: cargo_def.PresitgeDataInfo.PrestigesEntry
	nil,                              // 160: cargo_def.PresitgeDataInfo.ExtraPrestigesEntry
	nil,                              // 161: cargo_def.ActivityInfo.SignInEntry
	nil,                              // 162: cargo_def.Achievement.ProcessEntry
	nil,                              // 163: cargo_def.Achievement.RewardEntry
	nil,                              // 164: cargo_def.Achievement.RecordEntry
	nil,                              // 165: cargo_def.GroupGoodsData.GoodsMapEntry
	nil,                              // 166: cargo_def.PlayerShop.ShopMapEntry
	nil,                              // 167: cargo_def.MailData.PackageEntry
	nil,                              // 168: cargo_def.ElfDataInfo.ElfInfoEntry
	nil,                              // 169: cargo_def.ElfDataInfo.ElfEquipInfoEntry
	nil,                              // 170: cargo_def.ElfDataInfo.ElfDebrisCountEntry
	nil,                              // 171: cargo_def.ElfInfo.SkillDataEntry
	nil,                              // 172: cargo_def.ElfFightInfo.SkillDataEntry
	nil,                              // 173: cargo_def.AsyncInteraction.KeyPointsEntry
	nil,                              // 174: cargo_def.AsyncInteractionX.ReviewPointsEntry
	nil,                              // 175: cargo_def.PlayerAsyncInteractionA.DataMapEntry
	nil,                              // 176: cargo_def.PlayerAsyncInteractionS.DataMapEntry
	nil,                              // 177: cargo_def.PlayerAsyncInteractionX.DataMapEntry
	nil,                              // 178: cargo_def.PlayerAsyncInteractionM.DataMapEntry
	nil,                              // 179: cargo_def.RewardItem.ItemEntry
	nil,                              // 180: cargo_def.FriendData.RequestMapEntry
	nil,                              // 181: cargo_def.Book.BookEntry
	nil,                              // 182: cargo_def.SonBook.SonBookEntry
	nil,                              // 183: cargo_def.PrayData.PrayGroupMissCountDataMapEntry
	nil,                              // 184: cargo_def.PrayGroupMissCountData.NormalMissCountMapEntry
	nil,                              // 185: cargo_def.PrayGroupMissCountData.SpecialMissCountMapEntry
}
var file_cargo_def_player_data_proto_depIdxs = []int32{
	104, // 0: cargo_def.ItemInfo.attrsMeta:type_name -> cargo_def.ItemInfo.AttrsMetaEntry
	105, // 1: cargo_def.BagDataInfo.items:type_name -> cargo_def.BagDataInfo.ItemsEntry
	106, // 2: cargo_def.BagDataInfo.itemsRecords:type_name -> cargo_def.BagDataInfo.ItemsRecordsEntry
	107, // 3: cargo_def.WeaponDataInfo.WeaponBag:type_name -> cargo_def.WeaponDataInfo.WeaponBagEntry
	108, // 4: cargo_def.WeaponItemInfo.attrsMeta:type_name -> cargo_def.WeaponItemInfo.AttrsMetaEntry
	109, // 5: cargo_def.ChipDataInfo.chipBag:type_name -> cargo_def.ChipDataInfo.ChipBagEntry
	110, // 6: cargo_def.RoleItemInfo.chips:type_name -> cargo_def.RoleItemInfo.ChipsEntry
	111, // 7: cargo_def.RoleItemInfo.weapons:type_name -> cargo_def.RoleItemInfo.WeaponsEntry
	112, // 8: cargo_def.RoleItemInfo.skills:type_name -> cargo_def.RoleItemInfo.SkillsEntry
	113, // 9: cargo_def.RoleFightItemInfo.attrsMeta:type_name -> cargo_def.RoleFightItemInfo.AttrsMetaEntry
	114, // 10: cargo_def.RoleFightItemInfo.chips:type_name -> cargo_def.RoleFightItemInfo.ChipsEntry
	115, // 11: cargo_def.RoleFightItemInfo.weapons:type_name -> cargo_def.RoleFightItemInfo.WeaponsEntry
	76,  // 12: cargo_def.RoleFightItemInfo.elf:type_name -> cargo_def.ElfFightInfo
	116, // 13: cargo_def.RoleFightItemInfo.skills:type_name -> cargo_def.RoleFightItemInfo.SkillsEntry
	10,  // 14: cargo_def.TaskData.markList:type_name -> cargo_def.TaskMarkSave
	13,  // 15: cargo_def.TaskStateHistory.taskSteps:type_name -> cargo_def.TaskStepData
	14,  // 16: cargo_def.TaskDeliverData.stateHistory:type_name -> cargo_def.TaskStateHistory
	117, // 17: cargo_def.TaskDataInfo.taskMap:type_name -> cargo_def.TaskDataInfo.TaskMapEntry
	118, // 18: cargo_def.TaskDataInfo.deliveredTask:type_name -> cargo_def.TaskDataInfo.DeliveredTaskEntry
	119, // 19: cargo_def.TaskDataInfo.cycleTask:type_name -> cargo_def.TaskDataInfo.CycleTaskEntry
	18,  // 20: cargo_def.MailDataInfo.mailAttachMents:type_name -> cargo_def.MailAttachMent
	120, // 21: cargo_def.PMDataInfo.mailRecord:type_name -> cargo_def.PMDataInfo.MailRecordEntry
	22,  // 22: cargo_def.BBSArticleData.comments:type_name -> cargo_def.BBSCommentData
	121, // 23: cargo_def.BBSDataInfo.articleData:type_name -> cargo_def.BBSDataInfo.ArticleDataEntry
	122, // 24: cargo_def.GamePhoneDataInfo.gamePhoneDataMap:type_name -> cargo_def.GamePhoneDataInfo.GamePhoneDataMapEntry
	123, // 25: cargo_def.GamePhoneData.gamePhoneFlowDataMap:type_name -> cargo_def.GamePhoneData.GamePhoneFlowDataMapEntry
	124, // 26: cargo_def.KVDataInfo.flagData:type_name -> cargo_def.KVDataInfo.FlagDataEntry
	125, // 27: cargo_def.KVDataInfo.eventsKv:type_name -> cargo_def.KVDataInfo.EventsKvEntry
	126, // 28: cargo_def.KVDataInfo.counter:type_name -> cargo_def.KVDataInfo.CounterEntry
	127, // 29: cargo_def.FlagData.flagMap:type_name -> cargo_def.FlagData.FlagMapEntry
	128, // 30: cargo_def.RoleDataInfo.roleDatas:type_name -> cargo_def.RoleDataInfo.RoleDatasEntry
	129, // 31: cargo_def.FightTeamGroupDataInfo.teamData:type_name -> cargo_def.FightTeamGroupDataInfo.TeamDataEntry
	130, // 32: cargo_def.DungeonBaseInfo.LimitCount:type_name -> cargo_def.DungeonBaseInfo.LimitCountEntry
	131, // 33: cargo_def.DungeonBaseInfo.roles:type_name -> cargo_def.DungeonBaseInfo.RolesEntry
	132, // 34: cargo_def.DungeonRecordInfo.dungeonBase:type_name -> cargo_def.DungeonRecordInfo.DungeonBaseEntry
	133, // 35: cargo_def.RewardData.rewardMeta:type_name -> cargo_def.RewardData.RewardMetaEntry
	134, // 36: cargo_def.RewardData.rewardGroupMissCountMap:type_name -> cargo_def.RewardData.RewardGroupMissCountMapEntry
	135, // 37: cargo_def.RewardData.rewardType3Data:type_name -> cargo_def.RewardData.RewardType3DataEntry
	136, // 38: cargo_def.EventTriggerData.EventTypeMap:type_name -> cargo_def.EventTriggerData.EventTypeMapEntry
	137, // 39: cargo_def.EventTriggerData.EventIDMap:type_name -> cargo_def.EventTriggerData.EventIDMapEntry
	41,  // 40: cargo_def.CdkData.cdkeyList:type_name -> cargo_def.CDKeyInfo
	138, // 41: cargo_def.WeatherInfo.meteoData:type_name -> cargo_def.WeatherInfo.MeteoDataEntry
	139, // 42: cargo_def.WeatherInfo.intensity:type_name -> cargo_def.WeatherInfo.IntensityEntry
	140, // 43: cargo_def.MapData.weatherInfo:type_name -> cargo_def.MapData.WeatherInfoEntry
	141, // 44: cargo_def.MapInfo.mapDatas:type_name -> cargo_def.MapInfo.MapDatasEntry
	142, // 45: cargo_def.MapInfo.npcData:type_name -> cargo_def.MapInfo.NpcDataEntry
	143, // 46: cargo_def.PlayerMsgInfo.modelPara:type_name -> cargo_def.PlayerMsgInfo.ModelParaEntry
	36,  // 47: cargo_def.PlayerSaveData.rewardData:type_name -> cargo_def.RewardData
	48,  // 48: cargo_def.PlayerSaveData.playerBaseInfo:type_name -> cargo_def.PlayerMsgInfo
	74,  // 49: cargo_def.PlayerSaveData.elfDataInfo:type_name -> cargo_def.ElfDataInfo
	46,  // 50: cargo_def.PlayerSaveData.zoneStateData:type_name -> cargo_def.SafeCityZoneState
	32,  // 51: cargo_def.PlayerSaveData.roleData:type_name -> cargo_def.RoleDataInfo
	2,   // 52: cargo_def.PlayerSaveData.bagData:type_name -> cargo_def.BagDataInfo
	16,  // 53: cargo_def.PlayerSaveData.taskData:type_name -> cargo_def.TaskDataInfo
	3,   // 54: cargo_def.PlayerSaveData.weaponData:type_name -> cargo_def.WeaponDataInfo
	21,  // 55: cargo_def.PlayerSaveData.reportMailData:type_name -> cargo_def.PMDataInfo
	24,  // 56: cargo_def.PlayerSaveData.bbsData:type_name -> cargo_def.BBSDataInfo
	29,  // 57: cargo_def.PlayerSaveData.kvData:type_name -> cargo_def.KVDataInfo
	12,  // 58: cargo_def.PlayerSaveData.recordsData:type_name -> cargo_def.RecordDataInfo
	26,  // 59: cargo_def.PlayerSaveData.gpData:type_name -> cargo_def.GamePhoneDataInfo
	35,  // 60: cargo_def.PlayerSaveData.mrDataInfo:type_name -> cargo_def.DungeonRecordInfo
	7,   // 61: cargo_def.PlayerSaveData.chipData:type_name -> cargo_def.ChipDataInfo
	58,  // 62: cargo_def.PlayerSaveData.metaValueData:type_name -> cargo_def.MetaValueDataInfo
	60,  // 63: cargo_def.PlayerSaveData.presitgeData:type_name -> cargo_def.PresitgeDataInfo
	40,  // 64: cargo_def.PlayerSaveData.eventData:type_name -> cargo_def.EventTriggerData
	63,  // 65: cargo_def.PlayerSaveData.activityInfo:type_name -> cargo_def.ActivityInfo
	65,  // 66: cargo_def.PlayerSaveData.achieve:type_name -> cargo_def.Achievement
	71,  // 67: cargo_def.PlayerSaveData.ShopData:type_name -> cargo_def.PlayerShop
	87,  // 68: cargo_def.PlayerSaveData.asyncInteractionData:type_name -> cargo_def.PlayerAsyncInteraction
	45,  // 69: cargo_def.PlayerSaveData.mapInfo:type_name -> cargo_def.MapInfo
	42,  // 70: cargo_def.PlayerSaveData.cdkData:type_name -> cargo_def.CdkData
	90,  // 71: cargo_def.PlayerSaveData.friendData:type_name -> cargo_def.FriendData
	144, // 72: cargo_def.PlayerSaveData.fightWallRecord:type_name -> cargo_def.PlayerSaveData.FightWallRecordEntry
	145, // 73: cargo_def.PlayerSaveData.barrageRecord:type_name -> cargo_def.PlayerSaveData.BarrageRecordEntry
	146, // 74: cargo_def.PlayerSaveData.collectInfo:type_name -> cargo_def.PlayerSaveData.CollectInfoEntry
	95,  // 75: cargo_def.PlayerSaveData.books:type_name -> cargo_def.Book
	50,  // 76: cargo_def.PlayerSaveData.photo:type_name -> cargo_def.PhotoDataInfo
	52,  // 77: cargo_def.PlayerSaveData.flashGame:type_name -> cargo_def.FlashGameData
	33,  // 78: cargo_def.PlayerSaveData.fightTeam:type_name -> cargo_def.FightTeamGroupDataInfo
	103, // 79: cargo_def.PlayerSaveData.guideData:type_name -> cargo_def.PlayerGuideData
	36,  // 80: cargo_def.PlayerData.rewardData:type_name -> cargo_def.RewardData
	48,  // 81: cargo_def.PlayerData.playerBaseInfo:type_name -> cargo_def.PlayerMsgInfo
	74,  // 82: cargo_def.PlayerData.elfDataInfo:type_name -> cargo_def.ElfDataInfo
	46,  // 83: cargo_def.PlayerData.zoneStateData:type_name -> cargo_def.SafeCityZoneState
	32,  // 84: cargo_def.PlayerData.roleData:type_name -> cargo_def.RoleDataInfo
	2,   // 85: cargo_def.PlayerData.bagData:type_name -> cargo_def.BagDataInfo
	16,  // 86: cargo_def.PlayerData.taskData:type_name -> cargo_def.TaskDataInfo
	3,   // 87: cargo_def.PlayerData.weaponData:type_name -> cargo_def.WeaponDataInfo
	21,  // 88: cargo_def.PlayerData.reportMailData:type_name -> cargo_def.PMDataInfo
	24,  // 89: cargo_def.PlayerData.bbsData:type_name -> cargo_def.BBSDataInfo
	29,  // 90: cargo_def.PlayerData.kvData:type_name -> cargo_def.KVDataInfo
	12,  // 91: cargo_def.PlayerData.recordsData:type_name -> cargo_def.RecordDataInfo
	26,  // 92: cargo_def.PlayerData.gpData:type_name -> cargo_def.GamePhoneDataInfo
	35,  // 93: cargo_def.PlayerData.mrDataInfo:type_name -> cargo_def.DungeonRecordInfo
	7,   // 94: cargo_def.PlayerData.chipData:type_name -> cargo_def.ChipDataInfo
	58,  // 95: cargo_def.PlayerData.metaValueData:type_name -> cargo_def.MetaValueDataInfo
	60,  // 96: cargo_def.PlayerData.presitgeData:type_name -> cargo_def.PresitgeDataInfo
	40,  // 97: cargo_def.PlayerData.eventData:type_name -> cargo_def.EventTriggerData
	63,  // 98: cargo_def.PlayerData.activityInfo:type_name -> cargo_def.ActivityInfo
	65,  // 99: cargo_def.PlayerData.achieve:type_name -> cargo_def.Achievement
	71,  // 100: cargo_def.PlayerData.ShopData:type_name -> cargo_def.PlayerShop
	87,  // 101: cargo_def.PlayerData.asyncInteractionData:type_name -> cargo_def.PlayerAsyncInteraction
	45,  // 102: cargo_def.PlayerData.mapInfo:type_name -> cargo_def.MapInfo
	42,  // 103: cargo_def.PlayerData.cdkData:type_name -> cargo_def.CdkData
	90,  // 104: cargo_def.PlayerData.friendData:type_name -> cargo_def.FriendData
	147, // 105: cargo_def.PlayerData.fightWallRecord:type_name -> cargo_def.PlayerData.FightWallRecordEntry
	148, // 106: cargo_def.PlayerData.barrageRecord:type_name -> cargo_def.PlayerData.BarrageRecordEntry
	149, // 107: cargo_def.PlayerData.collectInfo:type_name -> cargo_def.PlayerData.CollectInfoEntry
	95,  // 108: cargo_def.PlayerData.books:type_name -> cargo_def.Book
	50,  // 109: cargo_def.PlayerData.photo:type_name -> cargo_def.PhotoDataInfo
	52,  // 110: cargo_def.PlayerData.flashGame:type_name -> cargo_def.FlashGameData
	98,  // 111: cargo_def.PlayerData.PrayData:type_name -> cargo_def.PrayData
	100, // 112: cargo_def.PlayerData.InstFightData:type_name -> cargo_def.InstanceFight
	33,  // 113: cargo_def.PlayerData.fightTeam:type_name -> cargo_def.FightTeamGroupDataInfo
	103, // 114: cargo_def.PlayerData.guideData:type_name -> cargo_def.PlayerGuideData
	150, // 115: cargo_def.FlashGameData.barrage:type_name -> cargo_def.FlashGameData.BarrageEntry
	151, // 116: cargo_def.FlashGameData.puzzle:type_name -> cargo_def.FlashGameData.PuzzleEntry
	152, // 117: cargo_def.FlashGameData.diffChecker:type_name -> cargo_def.FlashGameData.DiffCheckerEntry
	153, // 118: cargo_def.FlashGameData.qteRecord:type_name -> cargo_def.FlashGameData.QteRecordEntry
	154, // 119: cargo_def.FightPlayerInfo.WeaponDatas:type_name -> cargo_def.FightPlayerInfo.WeaponDatasEntry
	155, // 120: cargo_def.FightPlayerInfo.roleDatas:type_name -> cargo_def.FightPlayerInfo.RoleDatasEntry
	156, // 121: cargo_def.FightPlayerInfo.ChipDatas:type_name -> cargo_def.FightPlayerInfo.ChipDatasEntry
	51,  // 122: cargo_def.TransPlayerData.playerData:type_name -> cargo_def.PlayerData
	157, // 123: cargo_def.MetaValueDataInfo.metaValueMap:type_name -> cargo_def.MetaValueDataInfo.MetaValueMapEntry
	158, // 124: cargo_def.PresitgeItemInfo.sourceMap:type_name -> cargo_def.PresitgeItemInfo.SourceMapEntry
	159, // 125: cargo_def.PresitgeDataInfo.prestiges:type_name -> cargo_def.PresitgeDataInfo.PrestigesEntry
	160, // 126: cargo_def.PresitgeDataInfo.extraPrestiges:type_name -> cargo_def.PresitgeDataInfo.ExtraPrestigesEntry
	61,  // 127: cargo_def.RankDataH2C.rankData:type_name -> cargo_def.RankDataInfo
	161, // 128: cargo_def.ActivityInfo.signIn:type_name -> cargo_def.ActivityInfo.SignInEntry
	162, // 129: cargo_def.Achievement.process:type_name -> cargo_def.Achievement.ProcessEntry
	163, // 130: cargo_def.Achievement.reward:type_name -> cargo_def.Achievement.RewardEntry
	164, // 131: cargo_def.Achievement.record:type_name -> cargo_def.Achievement.RecordEntry
	165, // 132: cargo_def.GroupGoodsData.GoodsMap:type_name -> cargo_def.GroupGoodsData.GoodsMapEntry
	69,  // 133: cargo_def.ShopData.Groups:type_name -> cargo_def.GroupGoodsData
	166, // 134: cargo_def.PlayerShop.ShopMap:type_name -> cargo_def.PlayerShop.ShopMapEntry
	167, // 135: cargo_def.MailData.package:type_name -> cargo_def.MailData.PackageEntry
	168, // 136: cargo_def.ElfDataInfo.elfInfo:type_name -> cargo_def.ElfDataInfo.ElfInfoEntry
	169, // 137: cargo_def.ElfDataInfo.elfEquipInfo:type_name -> cargo_def.ElfDataInfo.ElfEquipInfoEntry
	170, // 138: cargo_def.ElfDataInfo.elfDebrisCount:type_name -> cargo_def.ElfDataInfo.ElfDebrisCountEntry
	171, // 139: cargo_def.ElfInfo.skillData:type_name -> cargo_def.ElfInfo.SkillDataEntry
	172, // 140: cargo_def.ElfFightInfo.skillData:type_name -> cargo_def.ElfFightInfo.SkillDataEntry
	173, // 141: cargo_def.AsyncInteraction.KeyPoints:type_name -> cargo_def.AsyncInteraction.KeyPointsEntry
	55,  // 142: cargo_def.AsyncInteraction.Generator:type_name -> cargo_def.FightPlayerInfo
	78,  // 143: cargo_def.AsyncInteractionA.Data:type_name -> cargo_def.AsyncInteraction
	78,  // 144: cargo_def.AsyncInteractionS.Data:type_name -> cargo_def.AsyncInteraction
	78,  // 145: cargo_def.AsyncInteractionX.Data:type_name -> cargo_def.AsyncInteraction
	174, // 146: cargo_def.AsyncInteractionX.ReviewPoints:type_name -> cargo_def.AsyncInteractionX.ReviewPointsEntry
	78,  // 147: cargo_def.AsyncInteractionM.Data:type_name -> cargo_def.AsyncInteraction
	175, // 148: cargo_def.PlayerAsyncInteractionA.DataMap:type_name -> cargo_def.PlayerAsyncInteractionA.DataMapEntry
	176, // 149: cargo_def.PlayerAsyncInteractionS.DataMap:type_name -> cargo_def.PlayerAsyncInteractionS.DataMapEntry
	177, // 150: cargo_def.PlayerAsyncInteractionX.DataMap:type_name -> cargo_def.PlayerAsyncInteractionX.DataMapEntry
	178, // 151: cargo_def.PlayerAsyncInteractionM.DataMap:type_name -> cargo_def.PlayerAsyncInteractionM.DataMapEntry
	83,  // 152: cargo_def.PlayerAsyncInteraction.PAIA:type_name -> cargo_def.PlayerAsyncInteractionA
	84,  // 153: cargo_def.PlayerAsyncInteraction.PAIS:type_name -> cargo_def.PlayerAsyncInteractionS
	85,  // 154: cargo_def.PlayerAsyncInteraction.PAIX:type_name -> cargo_def.PlayerAsyncInteractionX
	86,  // 155: cargo_def.PlayerAsyncInteraction.PAIM:type_name -> cargo_def.PlayerAsyncInteractionM
	179, // 156: cargo_def.RewardItem.item:type_name -> cargo_def.RewardItem.ItemEntry
	180, // 157: cargo_def.FriendData.RequestMap:type_name -> cargo_def.FriendData.RequestMapEntry
	181, // 158: cargo_def.Book.book:type_name -> cargo_def.Book.BookEntry
	182, // 159: cargo_def.SonBook.sonBook:type_name -> cargo_def.SonBook.SonBookEntry
	183, // 160: cargo_def.PrayData.PrayGroupMissCountDataMap:type_name -> cargo_def.PrayData.PrayGroupMissCountDataMapEntry
	184, // 161: cargo_def.PrayGroupMissCountData.NormalMissCountMap:type_name -> cargo_def.PrayGroupMissCountData.NormalMissCountMapEntry
	185, // 162: cargo_def.PrayGroupMissCountData.SpecialMissCountMap:type_name -> cargo_def.PrayGroupMissCountData.SpecialMissCountMapEntry
	101, // 163: cargo_def.AccountSaveData.antiData:type_name -> cargo_def.AntiAddictionData
	1,   // 164: cargo_def.BagDataInfo.ItemsEntry.value:type_name -> cargo_def.ItemInfo
	4,   // 165: cargo_def.WeaponDataInfo.WeaponBagEntry.value:type_name -> cargo_def.WeaponItemInfo
	5,   // 166: cargo_def.ChipDataInfo.ChipBagEntry.value:type_name -> cargo_def.ChipItemInfo
	6,   // 167: cargo_def.RoleFightItemInfo.ChipsEntry.value:type_name -> cargo_def.ChipFightInfo
	11,  // 168: cargo_def.TaskDataInfo.TaskMapEntry.value:type_name -> cargo_def.TaskData
	15,  // 169: cargo_def.TaskDataInfo.DeliveredTaskEntry.value:type_name -> cargo_def.TaskDeliverData
	17,  // 170: cargo_def.TaskDataInfo.CycleTaskEntry.value:type_name -> cargo_def.TaskCycle
	20,  // 171: cargo_def.PMDataInfo.MailRecordEntry.value:type_name -> cargo_def.ReportMailData
	23,  // 172: cargo_def.BBSDataInfo.ArticleDataEntry.value:type_name -> cargo_def.BBSArticleData
	27,  // 173: cargo_def.GamePhoneDataInfo.GamePhoneDataMapEntry.value:type_name -> cargo_def.GamePhoneData
	28,  // 174: cargo_def.GamePhoneData.GamePhoneFlowDataMapEntry.value:type_name -> cargo_def.GamePhoneFlowData
	30,  // 175: cargo_def.KVDataInfo.FlagDataEntry.value:type_name -> cargo_def.FlagData
	8,   // 176: cargo_def.RoleDataInfo.RoleDatasEntry.value:type_name -> cargo_def.RoleItemInfo
	31,  // 177: cargo_def.FightTeamGroupDataInfo.TeamDataEntry.value:type_name -> cargo_def.FightTeam
	34,  // 178: cargo_def.DungeonRecordInfo.DungeonBaseEntry.value:type_name -> cargo_def.DungeonBaseInfo
	39,  // 179: cargo_def.RewardData.RewardMetaEntry.value:type_name -> cargo_def.RewardItemInfo
	37,  // 180: cargo_def.RewardData.RewardGroupMissCountMapEntry.value:type_name -> cargo_def.RewardGroupMissCountData
	38,  // 181: cargo_def.RewardData.RewardType3DataEntry.value:type_name -> cargo_def.RewardType3Data
	43,  // 182: cargo_def.MapData.WeatherInfoEntry.value:type_name -> cargo_def.WeatherInfo
	44,  // 183: cargo_def.MapInfo.MapDatasEntry.value:type_name -> cargo_def.MapData
	47,  // 184: cargo_def.MapInfo.NpcDataEntry.value:type_name -> cargo_def.NPCValue
	94,  // 185: cargo_def.PlayerSaveData.CollectInfoEntry.value:type_name -> cargo_def.Collect
	94,  // 186: cargo_def.PlayerData.CollectInfoEntry.value:type_name -> cargo_def.Collect
	4,   // 187: cargo_def.FightPlayerInfo.WeaponDatasEntry.value:type_name -> cargo_def.WeaponItemInfo
	8,   // 188: cargo_def.FightPlayerInfo.RoleDatasEntry.value:type_name -> cargo_def.RoleItemInfo
	5,   // 189: cargo_def.FightPlayerInfo.ChipDatasEntry.value:type_name -> cargo_def.ChipItemInfo
	57,  // 190: cargo_def.MetaValueDataInfo.MetaValueMapEntry.value:type_name -> cargo_def.MetaValueInfo
	59,  // 191: cargo_def.PresitgeDataInfo.PrestigesEntry.value:type_name -> cargo_def.PresitgeItemInfo
	59,  // 192: cargo_def.PresitgeDataInfo.ExtraPrestigesEntry.value:type_name -> cargo_def.PresitgeItemInfo
	64,  // 193: cargo_def.ActivityInfo.SignInEntry.value:type_name -> cargo_def.SignData
	66,  // 194: cargo_def.Achievement.RewardEntry.value:type_name -> cargo_def.AchieveReward
	67,  // 195: cargo_def.Achievement.RecordEntry.value:type_name -> cargo_def.AchieveRecord
	68,  // 196: cargo_def.GroupGoodsData.GoodsMapEntry.value:type_name -> cargo_def.GoodsData
	70,  // 197: cargo_def.PlayerShop.ShopMapEntry.value:type_name -> cargo_def.ShopData
	75,  // 198: cargo_def.ElfDataInfo.ElfInfoEntry.value:type_name -> cargo_def.ElfInfo
	77,  // 199: cargo_def.ElfDataInfo.ElfEquipInfoEntry.value:type_name -> cargo_def.ElfEquipInfo
	79,  // 200: cargo_def.PlayerAsyncInteractionA.DataMapEntry.value:type_name -> cargo_def.AsyncInteractionA
	80,  // 201: cargo_def.PlayerAsyncInteractionS.DataMapEntry.value:type_name -> cargo_def.AsyncInteractionS
	81,  // 202: cargo_def.PlayerAsyncInteractionX.DataMapEntry.value:type_name -> cargo_def.AsyncInteractionX
	82,  // 203: cargo_def.PlayerAsyncInteractionM.DataMapEntry.value:type_name -> cargo_def.AsyncInteractionM
	96,  // 204: cargo_def.Book.BookEntry.value:type_name -> cargo_def.SonBook
	99,  // 205: cargo_def.PrayData.PrayGroupMissCountDataMapEntry.value:type_name -> cargo_def.PrayGroupMissCountData
	206, // [206:206] is the sub-list for method output_type
	206, // [206:206] is the sub-list for method input_type
	206, // [206:206] is the sub-list for extension type_name
	206, // [206:206] is the sub-list for extension extendee
	0,   // [0:206] is the sub-list for field type_name
}

func init() { file_cargo_def_player_data_proto_init() }
func file_cargo_def_player_data_proto_init() {
	if File_cargo_def_player_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cargo_def_player_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BagDataInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeaponDataInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeaponItemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChipItemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChipFightInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChipDataInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleItemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleFightItemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskMarkSave); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordDataInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskStepData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskStateHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskDeliverData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskDataInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskCycle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MailAttachMent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MailDataInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportMailData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PMDataInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BBSCommentData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BBSArticleData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BBSDataInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamePhoneOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamePhoneDataInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamePhoneData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamePhoneFlowData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KVDataInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlagData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FightTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleDataInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FightTeamGroupDataInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonBaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonRecordInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardGroupMissCountData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardType3Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardItemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTriggerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDKeyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CdkData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeatherInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SafeCityZoneState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NPCValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerMsgInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSaveData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhotoDataInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlashGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerStorageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScenePlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FightPlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransPlayerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaValueInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaValueDataInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PresitgeItemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PresitgeDataInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankDataInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankDataH2C); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Achievement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AchieveReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AchieveRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupGoodsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShopData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerShop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MailPackageItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MailData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElfDataInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElfInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElfFightInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElfEquipInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsyncInteraction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsyncInteractionA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsyncInteractionS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsyncInteractionX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsyncInteractionM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerAsyncInteractionA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerAsyncInteractionS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerAsyncInteractionX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerAsyncInteractionM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerAsyncInteraction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoticeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleChatData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerBriefData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FightWallData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Book); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SonBook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BagItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrayData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrayGroupMissCountData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceFight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AntiAddictionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountSaveData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cargo_def_player_data_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerGuideData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cargo_def_player_data_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   185,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cargo_def_player_data_proto_goTypes,
		DependencyIndexes: file_cargo_def_player_data_proto_depIdxs,
		EnumInfos:         file_cargo_def_player_data_proto_enumTypes,
		MessageInfos:      file_cargo_def_player_data_proto_msgTypes,
	}.Build()
	File_cargo_def_player_data_proto = out.File
	file_cargo_def_player_data_proto_rawDesc = nil
	file_cargo_def_player_data_proto_goTypes = nil
	file_cargo_def_player_data_proto_depIdxs = nil
}
